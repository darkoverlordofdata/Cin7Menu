// Generated by CoffeeScript 1.10.0
var APPLICATION_ICON_SIZE, AccountsService, AllProgramsItem, AppFavorites, AppPopupSubMenuMenuItem, Applet, ApplicationButton, ApplicationContextMenuItem, CATEGORY_ICON_SIZE, CMenu, CategoriesApplicationsBox, CategoryButton, Cinnamon, Clutter, DND, DocInfo, FavoritesBox, FavoritesButton, FileUtils, GLib, GenericApplicationButton, Gio, GnomeSession, Gtk, HOVER_ICON_SIZE, HoverIcon, ICON_SIZE, MAX_FAV_ICON_SIZE, MAX_RECENT_FILES, Main, Mainloop, Meta, MyApplet, Pango, PlaceButton, PlaceCategoryButton, PopupMenu, RecentButton, RecentCategoryButton, RecentClearButton, RightButtonsBox, ScreenSaver, Session, Settings, ShutdownContextMenuItem, ShutdownMenu, Signals, St, TextBoxItem, TransientButton, Tweener, USER_DESKTOP_PATH, Util, VisibleChildIterator, appsys, main,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  slice = [].slice,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Applet = imports.ui.applet;

Mainloop = imports.mainloop;

CMenu = imports.gi.CMenu;

Cinnamon = imports.gi.Cinnamon;

St = imports.gi.St;

Clutter = imports.gi.Clutter;

Main = imports.ui.main;

PopupMenu = imports.ui.popupMenu;

AppFavorites = imports.ui.appFavorites;

Gtk = imports.gi.Gtk;

Gio = imports.gi.Gio;

Signals = imports.signals;

GnomeSession = imports.misc.gnomeSession;

ScreenSaver = imports.misc.screenSaver;

FileUtils = imports.misc.fileUtils;

Util = imports.misc.util;

Tweener = imports.ui.tweener;

DND = imports.ui.dnd;

Meta = imports.gi.Meta;

DocInfo = imports.misc.docInfo;

GLib = imports.gi.GLib;

AccountsService = imports.gi.AccountsService;

Settings = imports.ui.settings;

Pango = imports.gi.Pango;

Session = new GnomeSession.SessionManager();

ICON_SIZE = 16;

MAX_FAV_ICON_SIZE = 64;

CATEGORY_ICON_SIZE = 22;

APPLICATION_ICON_SIZE = 22;

HOVER_ICON_SIZE = 48;

MAX_RECENT_FILES = 20;

USER_DESKTOP_PATH = FileUtils.getUserDesktopDir();

appsys = Cinnamon.AppSystem.get_default();

VisibleChildIterator = (function() {
  function VisibleChildIterator(parent, container) {
    this.getAbsoluteIndexOfChild = bind(this.getAbsoluteIndexOfChild, this);
    this.getNumVisibleChildren = bind(this.getNumVisibleChildren, this);
    this.getLastVisible = bind(this.getLastVisible, this);
    this.getFirstVisible = bind(this.getFirstVisible, this);
    this.getPrevVisible = bind(this.getPrevVisible, this);
    this.getNextVisible = bind(this.getNextVisible, this);
    this.reloadVisible = bind(this.reloadVisible, this);
    this.container = container;
    this._parent = parent;
    this._num_children = 0;
    this.reloadVisible();
    return;
  }

  VisibleChildIterator.prototype.reloadVisible = function() {
    var child, children, i;
    this.visible_children = new Array();
    this.abs_index = new Array();
    children = this.container.get_children();
    i = 0;
    while (i < children.length) {
      child = children[i];
      if (child.visible) {
        this.visible_children.push(child);
        this.abs_index.push(i);
      }
      i++;
    }
    this._num_children = this.visible_children.length;
  };

  VisibleChildIterator.prototype.getNextVisible = function(cur_child) {
    if (this.visible_children.indexOf(cur_child) === this._num_children - 1) {
      return cur_child;
    } else {
      return this.visible_children[this.visible_children.indexOf(cur_child) + 1];
    }
  };

  VisibleChildIterator.prototype.getPrevVisible = function(cur_child) {
    if (this.visible_children.indexOf(cur_child) === 0) {
      return cur_child;
    } else {
      return this.visible_children[this.visible_children.indexOf(cur_child) - 1];
    }
  };

  VisibleChildIterator.prototype.getFirstVisible = function() {
    return this.visible_children[0];
  };

  VisibleChildIterator.prototype.getLastVisible = function() {
    return this.visible_children[this._num_children - 1];
  };

  VisibleChildIterator.prototype.getNumVisibleChildren = function() {
    return this._num_children;
  };

  VisibleChildIterator.prototype.getAbsoluteIndexOfChild = function(child) {
    return this.abs_index[this.visible_children.indexOf(child)];
  };

  return VisibleChildIterator;

})();

ApplicationContextMenuItem = (function() {
  ApplicationContextMenuItem.prototype.__proto__ = PopupMenu.PopupBaseMenuItem.prototype;

  function ApplicationContextMenuItem(appButton, label, action) {
    this.activate = bind(this.activate, this);
    this._init(appButton, label, action);
  }

  ApplicationContextMenuItem.prototype._init = function(appButton, label, action) {
    PopupMenu.PopupBaseMenuItem.prototype._init.call(this, {
      focusOnHover: false
    });
    this._appButton = appButton;
    this._action = action;
    this.label = new St.Label({
      text: label
    });
    this.addActor(this.label);
  };

  ApplicationContextMenuItem.prototype.activate = function(event) {
    var desktopFiles, destFile, e, enabled_applets, error, error1, file, new_applet_id, settings, winListApplet;
    switch (this._action) {
      case "add_to_panel":
        winListApplet = false;
        try {
          winListApplet = imports.ui.appletManager.applets["WindowListGroup@jake.phy@gmail.com"];
        } catch (error) {
          e = error;
        }
        if (winListApplet) {
          winListApplet.applet.GetAppFavorites().addFavorite(this._appButton.app.get_id());
        } else {
          settings = new Gio.Settings({
            schema: "org.cinnamon"
          });
          desktopFiles = settings.get_strv("panel-launchers");
          desktopFiles.push(this._appButton.app.get_id());
          settings.set_strv("panel-launchers", desktopFiles);
          if (!Main.AppletManager.get_object_for_uuid("panel-launchers@cinnamon.org")) {
            new_applet_id = global.settings.get_int("next-applet-id");
            global.settings.set_int("next-applet-id", new_applet_id + 1);
            enabled_applets = global.settings.get_strv("enabled-applets");
            enabled_applets.push("panel1:right:0:panel-launchers@cinnamon.org:" + new_applet_id);
            global.settings.set_strv("enabled-applets", enabled_applets);
          }
        }
        break;
      case "add_to_desktop":
        file = Gio.file_new_for_path(this._appButton.app.get_app_info().get_filename());
        destFile = Gio.file_new_for_path(USER_DESKTOP_PATH + "/" + this._appButton.app.get_id());
        try {
          file.copy(destFile, 0, null, function() {});
          Util.spawnCommandLine("chmod +x \"" + USER_DESKTOP_PATH + "/" + this._appButton.app.get_id() + "\"");
        } catch (error1) {
          e = error1;
          global.log(e);
        }
        break;
      case "add_to_favorites":
        AppFavorites.getAppFavorites().addFavorite(this._appButton.app.get_id());
        break;
      case "remove_from_favorites":
        AppFavorites.getAppFavorites().removeFavorite(this._appButton.app.get_id());
    }
    this._appButton.toggleMenu();
    return false;
  };

  return ApplicationContextMenuItem;

})();

AppPopupSubMenuMenuItem = (function() {
  AppPopupSubMenuMenuItem.prototype.__proto__ = PopupMenu.PopupBaseMenuItem.prototype;

  function AppPopupSubMenuMenuItem() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    this._onButtonReleaseEvent = bind(this._onButtonReleaseEvent, this);
    this.activate = bind(this.activate, this);
    this._onKeyPressEvent = bind(this._onKeyPressEvent, this);
    this.destroy = bind(this.destroy, this);
    this._subMenuOpenStateChanged = bind(this._subMenuOpenStateChanged, this);
    this._init.apply(this, args);
  }

  AppPopupSubMenuMenuItem.prototype._init = function(text, hide_expander) {
    var table;
    PopupMenu.PopupBaseMenuItem.prototype._init.call(this);
    this.actor.add_style_class_name("popup-submenu-menu-item");
    table = new St.Table({
      homogeneous: false,
      reactive: true
    });
    if (!hide_expander) {
      this._triangle = new St.Icon({
        icon_name: "media-playback-start",
        icon_type: St.IconType.SYMBOLIC,
        style_class: "popup-menu-icon"
      });
      table.add(this._triangle, {
        row: 0,
        col: 0,
        col_span: 1,
        x_expand: false,
        x_align: St.Align.START
      });
      this.label = new St.Label({
        text: text
      });
      this.label.set_margin_left(6.0);
      table.add(this.label, {
        row: 0,
        col: 1,
        col_span: 1,
        x_align: St.Align.START
      });
    } else {
      this.label = new St.Label({
        text: text
      });
      table.add(this.label, {
        row: 0,
        col: 0,
        col_span: 1,
        x_align: St.Align.START
      });
    }
    this.actor.label_actor = this.label;
    this.addActor(table, {
      expand: true,
      span: 1,
      align: St.Align.START
    });
    this.menu = new PopupMenu.PopupSubMenu(this.actor, this._triangle);
    this.menu.connect("open-state-changed", this._subMenuOpenStateChanged);
  };

  AppPopupSubMenuMenuItem.prototype._subMenuOpenStateChanged = function(menu, open) {
    this.actor.change_style_pseudo_class("open", open);
  };

  AppPopupSubMenuMenuItem.prototype.destroy = function() {
    this.menu.destroy();
    PopupBaseMenuItem.prototype.destroy.call(this);
  };

  AppPopupSubMenuMenuItem.prototype._onKeyPressEvent = function(actor, event) {
    var symbol;
    symbol = event.get_key_symbol();
    if (symbol === Clutter.KEY_Right) {
      this.menu.open(true);
      this.menu.actor.navigate_focus(null, Gtk.DirectionType.DOWN, false);
      return true;
    } else if (symbol === Clutter.KEY_Left && this.menu.isOpen) {
      this.menu.close();
      return true;
    }
    return PopupMenu.PopupBaseMenuItem.prototype._onKeyPressEvent.call(this, actor, event);
  };

  AppPopupSubMenuMenuItem.prototype.activate = function(event) {
    this.menu.open(true);
  };

  AppPopupSubMenuMenuItem.prototype._onButtonReleaseEvent = function(actor) {
    this.menu.toggle();
  };

  return AppPopupSubMenuMenuItem;

})();

GenericApplicationButton = (function() {
  GenericApplicationButton.prototype.__proto__ = PopupMenu.PopupSubMenuMenuItem.prototype;

  function GenericApplicationButton(appsMenuButton, app, withMenu) {
    this._subMenuOpenStateChanged = bind(this._subMenuOpenStateChanged, this);
    this.toggleMenu = bind(this.toggleMenu, this);
    this.closeMenu = bind(this.closeMenu, this);
    this.activate = bind(this.activate, this);
    this._onButtonReleaseEvent = bind(this._onButtonReleaseEvent, this);
    this._init(appsMenuButton, app, withMenu);
  }

  GenericApplicationButton.prototype._init = function(appsMenuButton, app, withMenu) {
    this.app = app;
    this.appsMenuButton = appsMenuButton;
    PopupMenu.PopupBaseMenuItem.prototype._init.call(this, {
      hover: false
    });
    this.withMenu = withMenu;
    if (this.withMenu) {
      this.menu = new PopupMenu.PopupSubMenu(this.actor);
      this.menu.actor.set_style_class_name("menu-context-menu");
      this.menu.connect("open-state-changed", this._subMenuOpenStateChanged);
    }
  };

  GenericApplicationButton.prototype._onButtonReleaseEvent = function(actor, event) {
    if (event.get_button() === 1) {
      this.activate(event);
    }
    if (event.get_button() === 3) {
      if (this.withMenu && !this.menu.isOpen) {
        this.appsMenuButton.closeApplicationsContextMenus(this.app, true);
      }
      this.toggleMenu();
    }
    return true;
  };

  GenericApplicationButton.prototype.activate = function(event) {
    this.app.open_new_window(-1);
    this.appsMenuButton.menu.close();
  };

  GenericApplicationButton.prototype.closeMenu = function() {
    if (this.withMenu) {
      this.menu.close();
    }
  };

  GenericApplicationButton.prototype.toggleMenu = function() {
    var children, i, menuItem;
    if (!this.withMenu) {
      return;
    }
    if (!this.menu.isOpen) {
      children = this.menu.box.get_children();
      for (i in children) {
        this.menu.box.remove_actor(children[i]);
      }
      menuItem = void 0;
      menuItem = new ApplicationContextMenuItem(this, _("Add to panel"), "add_to_panel");
      this.menu.addMenuItem(menuItem);
      if (USER_DESKTOP_PATH) {
        menuItem = new ApplicationContextMenuItem(this, _("Add to desktop"), "add_to_desktop");
        this.menu.addMenuItem(menuItem);
      }
      if (AppFavorites.getAppFavorites().isFavorite(this.app.get_id())) {
        menuItem = new ApplicationContextMenuItem(this, _("Remove from favorites"), "remove_from_favorites");
        this.menu.addMenuItem(menuItem);
      } else {
        menuItem = new ApplicationContextMenuItem(this, _("Add to favorites"), "add_to_favorites");
        this.menu.addMenuItem(menuItem);
      }
    }
    this.menu.toggle();
  };

  GenericApplicationButton.prototype._subMenuOpenStateChanged = function() {
    if (this.menu.isOpen) {
      this.appsMenuButton._scrollToButton(this.menu);
    }
  };

  return GenericApplicationButton;

})();

TransientButton = (function() {
  TransientButton.prototype.__proto__ = AppPopupSubMenuMenuItem.prototype;

  function TransientButton(appsMenuButton, pathOrCommand) {
    this.activate = bind(this.activate, this);
    this._onButtonReleaseEvent = bind(this._onButtonReleaseEvent, this);
    this._init(appsMenuButton, pathOrCommand);
  }

  TransientButton.prototype._init = function(appsMenuButton, pathOrCommand) {
    var contentType, displayPath, e, error, fileInfo, iconBox, iconName, icon_uri, n, themedIcon;
    displayPath = pathOrCommand;
    if (pathOrCommand.charAt(0) === "~") {
      pathOrCommand = pathOrCommand.slice(1);
      pathOrCommand = GLib.get_home_dir() + pathOrCommand;
    }
    this.isPath = pathOrCommand.substr(pathOrCommand.length - 1) === "/";
    if (this.isPath) {
      this.path = pathOrCommand;
    } else {
      n = pathOrCommand.lastIndexOf("/");
      if (n !== 1) {
        this.path = pathOrCommand.substr(0, n);
      }
    }
    this.pathOrCommand = pathOrCommand;
    this.appsMenuButton = appsMenuButton;
    PopupMenu.PopupBaseMenuItem.prototype._init.call(this, {
      hover: false
    });
    this.app = {
      get_app_info: {
        get_filename: (function(_this) {
          return function() {
            return pathOrCommand;
          };
        })(this)
      },
      get_id: (function(_this) {
        return function() {
          return -1;
        };
      })(this),
      get_description: (function(_this) {
        return function() {
          return _this.pathOrCommand;
        };
      })(this),
      get_name: (function(_this) {
        return function() {
          return "";
        };
      })(this)
    };
    iconBox = new St.Bin();
    this.file = Gio.file_new_for_path(this.pathOrCommand);
    try {
      this.handler = this.file.query_default_handler(null);
      icon_uri = this.file.get_uri();
      fileInfo = this.file.query_info(Gio.FILE_ATTRIBUTE_STANDARD_TYPE, Gio.FileQueryInfoFlags.NONE, null);
      contentType = Gio.content_type_guess(this.pathOrCommand, null);
      themedIcon = Gio.content_type_get_icon(contentType[0]);
      this.icon = new St.Icon({
        gicon: themedIcon,
        icon_size: APPLICATION_ICON_SIZE,
        icon_type: St.IconType.FULLCOLOR
      });
      this.actor.set_style_class_name("menu-application-button");
    } catch (error) {
      e = error;
      this.handler = null;
      iconName = (this.isPath ? "gnome-folder" : "unknown");
      this.icon = new St.Icon({
        icon_name: iconName,
        icon_size: APPLICATION_ICON_SIZE,
        icon_type: St.IconType.FULLCOLOR
      });
      this.actor.set_style_class_name("menu-application-button");
    }
    this.addActor(this.icon);
    this.label = new St.Label({
      text: displayPath,
      style_class: "menu-application-button-label"
    });
    this.addActor(this.label);
    this.isDraggableApp = false;
  };

  TransientButton.prototype._onButtonReleaseEvent = function(actor, event) {
    if (event.get_button() === 1) {
      this.activate(event);
    }
    return true;
  };

  TransientButton.prototype.activate = function(event) {
    var e, error;
    if (this.handler != null) {
      this.handler.launch([this.file], null);
    } else {
      try {
        Util.spawn(["gvfs-open", this.file.get_uri()]);
      } catch (error) {
        e = error;
        global.logError("No handler available to open " + this.file.get_uri());
      }
    }
    this.appsMenuButton.menu.close();
  };

  return TransientButton;

})();

ApplicationButton = (function(superClass) {
  extend(ApplicationButton, superClass);

  function ApplicationButton(appsMenuButton, app) {
    this.getDragActorSource = bind(this.getDragActorSource, this);
    this.getDragActor = bind(this.getDragActor, this);
    this.get_app_id = bind(this.get_app_id, this);
    ApplicationButton.__super__.constructor.call(this, appsMenuButton, app, true);
    this.category = new Array();
    this.actor.set_style_class_name("menu-application-button");
    this.icon = this.app.create_icon_texture(APPLICATION_ICON_SIZE);
    this.addActor(this.icon);
    this.name = this.app.get_name();
    this.label = new St.Label({
      text: this.name,
      style_class: "menu-application-button-label"
    });
    this.addActor(this.label);
    this._draggable = DND.makeDraggable(this.actor);
    this.isDraggableApp = true;
    return;
  }

  ApplicationButton.prototype.get_app_id = function() {
    return this.app.get_id();
  };

  ApplicationButton.prototype.getDragActor = function() {
    var favorites, icon_size, monitorHeight, nbFavorites, real_size;
    favorites = AppFavorites.getAppFavorites().getFavorites();
    nbFavorites = favorites.length;
    monitorHeight = Main.layoutManager.primaryMonitor.height;
    real_size = (0.7 * monitorHeight) / nbFavorites;
    icon_size = 0.6 * real_size;
    if (icon_size > MAX_FAV_ICON_SIZE) {
      icon_size = MAX_FAV_ICON_SIZE;
    }
    return this.app.create_icon_texture(icon_size);
  };

  ApplicationButton.prototype.getDragActorSource = function() {
    return this.actor;
  };

  return ApplicationButton;

})(GenericApplicationButton);

PlaceButton = (function() {
  PlaceButton.prototype.__proto__ = PopupMenu.PopupBaseMenuItem.prototype;

  function PlaceButton(appsMenuButton, place, button_name) {
    this.activate = bind(this.activate, this);
    this._onButtonReleaseEvent = bind(this._onButtonReleaseEvent, this);
    this._init(appsMenuButton, place, button_name);
  }

  PlaceButton.prototype._init = function(appsMenuButton, place, button_name) {
    PopupMenu.PopupBaseMenuItem.prototype._init.call(this, {
      hover: false
    });
    this.appsMenuButton = appsMenuButton;
    this.place = place;
    this.button_name = button_name;
    this.actor.set_style_class_name("menu-application-button");
    this.actor._delegate = this;
    this.label = new St.Label({
      text: this.button_name,
      style_class: "menu-application-button-label"
    });
    this.icon = place.iconFactory(APPLICATION_ICON_SIZE);
    this.addActor(this.icon);
    this.addActor(this.label);
  };

  PlaceButton.prototype._onButtonReleaseEvent = function(actor, event) {
    if (event.get_button() === 1) {
      this.place.launch();
      this.appsMenuButton.menu.close();
    }
  };

  PlaceButton.prototype.activate = function(event) {
    this.place.launch();
    this.appsMenuButton.menu.close();
  };

  return PlaceButton;

})();

RecentButton = (function() {
  RecentButton.prototype.__proto__ = PopupMenu.PopupBaseMenuItem.prototype;

  function RecentButton(appsMenuButton, file) {
    this.activate = bind(this.activate, this);
    this._onButtonReleaseEvent = bind(this._onButtonReleaseEvent, this);
    this._init(appsMenuButton, file);
  }

  RecentButton.prototype._init = function(appsMenuButton, file) {
    PopupMenu.PopupBaseMenuItem.prototype._init.call(this, {
      hover: false
    });
    this.file = file;
    this.appsMenuButton = appsMenuButton;
    this.button_name = this.file.name;
    this.actor.set_style_class_name("menu-application-button");
    this.actor._delegate = this;
    this.label = new St.Label({
      text: this.button_name,
      style_class: "menu-application-button-label"
    });
    this.label.clutter_text.ellipsize = Pango.EllipsizeMode.END;
    this.icon = file.createIcon(APPLICATION_ICON_SIZE);
    this.addActor(this.icon);
    this.addActor(this.label);
  };

  RecentButton.prototype._onButtonReleaseEvent = function(actor, event) {
    if (event.get_button() === 1) {
      Gio.app_info_launch_default_for_uri(this.file.uri, global.create_app_launch_context());
      this.appsMenuButton.menu.close();
    }
  };

  RecentButton.prototype.activate = function(event) {
    Gio.app_info_launch_default_for_uri(this.file.uri, global.create_app_launch_context());
    this.appsMenuButton.menu.close();
  };

  return RecentButton;

})();

RecentClearButton = (function() {
  RecentClearButton.prototype.__proto__ = PopupMenu.PopupBaseMenuItem.prototype;

  function RecentClearButton(appsMenuButton) {
    this._onButtonReleaseEvent = bind(this._onButtonReleaseEvent, this);
    this._init(appsMenuButton);
  }

  RecentClearButton.prototype._init = function(appsMenuButton) {
    PopupMenu.PopupBaseMenuItem.prototype._init.call(this, {
      hover: false
    });
    this.appsMenuButton = appsMenuButton;
    this.actor.set_style_class_name("menu-application-button");
    this.button_name = _("Clear list");
    this.actor._delegate = this;
    this.label = new St.Label({
      text: this.button_name,
      style_class: "menu-application-button-label"
    });
    this.icon = new St.Icon({
      icon_name: "edit-clear",
      icon_type: St.IconType.SYMBOLIC,
      icon_size: APPLICATION_ICON_SIZE
    });
    this.addActor(this.icon);
    this.addActor(this.label);
  };

  RecentClearButton.prototype._onButtonReleaseEvent = function(actor, event) {
    var GtkRecent;
    if (event.get_button() === 1) {
      this.appsMenuButton.menu.close();
      GtkRecent = new Gtk.RecentManager();
      GtkRecent.purge_items();
    }
  };

  return RecentClearButton;

})();

CategoryButton = (function() {
  CategoryButton.prototype.__proto__ = PopupMenu.PopupBaseMenuItem.prototype;

  function CategoryButton(app) {
    this._init(app);
  }

  CategoryButton.prototype._init = function(category) {
    var icon, label;
    PopupMenu.PopupBaseMenuItem.prototype._init.call(this, {
      hover: false
    });
    this.actor.set_style_class_name("menu-category-button");
    label = void 0;
    if (category) {
      icon = category.get_icon();
      if (icon && icon.get_names) {
        this.icon_name = icon.get_names().toString();
      } else {
        this.icon_name = "";
      }
      label = category.get_name();
    } else {
      label = _("All Applications");
    }
    this.actor._delegate = this;
    this.label = new St.Label({
      text: label,
      style_class: "menu-category-button-label"
    });
    if (category && this.icon_name) {
      this.icon = new St.Icon({
        icon_name: this.icon_name,
        icon_size: CATEGORY_ICON_SIZE,
        icon_type: St.IconType.FULLCOLOR
      });
      this.addActor(this.icon);
    }
    this.addActor(this.label);
  };

  return CategoryButton;

})();

PlaceCategoryButton = (function() {
  PlaceCategoryButton.prototype.__proto__ = PopupMenu.PopupBaseMenuItem.prototype;

  function PlaceCategoryButton(app) {
    this._init(app);
  }

  PlaceCategoryButton.prototype._init = function(category) {
    PopupMenu.PopupBaseMenuItem.prototype._init.call(this, {
      hover: false
    });
    this.actor.set_style_class_name("menu-category-button");
    this.actor._delegate = this;
    this.label = new St.Label({
      text: _("Places"),
      style_class: "menu-category-button-label"
    });
    this.icon = new St.Icon({
      icon_name: "folder",
      icon_size: CATEGORY_ICON_SIZE,
      icon_type: St.IconType.FULLCOLOR
    });
    this.addActor(this.icon);
    this.addActor(this.label);
  };

  return PlaceCategoryButton;

})();

RecentCategoryButton = (function() {
  RecentCategoryButton.prototype.__proto__ = PopupMenu.PopupBaseMenuItem.prototype;

  function RecentCategoryButton(app) {
    this._init(app);
  }

  RecentCategoryButton.prototype._init = function(category) {
    PopupMenu.PopupBaseMenuItem.prototype._init.call(this, {
      hover: false
    });
    this.actor.set_style_class_name("menu-category-button");
    this.actor._delegate = this;
    this.label = new St.Label({
      text: _("Recent Files"),
      style_class: "menu-category-button-label"
    });
    this.icon = new St.Icon({
      icon_name: "folder-recent",
      icon_size: CATEGORY_ICON_SIZE,
      icon_type: St.IconType.FULLCOLOR
    });
    this.addActor(this.icon);
    this.addActor(this.label);
  };

  return RecentCategoryButton;

})();

FavoritesButton = (function(superClass) {
  extend(FavoritesButton, superClass);

  function FavoritesButton(appsMenuButton, app, nbFavorites, iconSize) {
    this.getDragActorSource = bind(this.getDragActorSource, this);
    this.getDragActor = bind(this.getDragActor, this);
    this.get_app_id = bind(this.get_app_id, this);
    var icon_size, monitorHeight, real_size;
    FavoritesButton.__super__.constructor.call(this, appsMenuButton, app, true);
    monitorHeight = Main.layoutManager.primaryMonitor.height;
    real_size = (0.7 * monitorHeight) / nbFavorites;
    icon_size = iconSize;
    if (icon_size > MAX_FAV_ICON_SIZE) {
      icon_size = MAX_FAV_ICON_SIZE;
    }
    this.actor.style = "padding-top: " + (icon_size / 3) + "px;padding-bottom: " + (icon_size / 3) + "px; margin:auto;";
    this.actor.add_style_class_name("menu-favorites-button");
    this.addActor(app.create_icon_texture(icon_size));
    this.label = new St.Label({
      text: this.app.get_name(),
      style_class: "menu-application-button-label"
    });
    this.addActor(this.label);
    this._draggable = DND.makeDraggable(this.actor);
    this.isDraggableApp = true;
    return;
  }

  FavoritesButton.prototype.get_app_id = function() {
    return this.app.get_id();
  };

  FavoritesButton.prototype.getDragActor = function() {
    return new Clutter.Clone({
      source: this.actor
    });
  };

  FavoritesButton.prototype.getDragActorSource = function() {
    return this.actor;
  };

  return FavoritesButton;

})(GenericApplicationButton);

TextBoxItem = (function(superClass) {
  extend(TextBoxItem, superClass);

  function TextBoxItem(label, icon1, func, parent1, hoverIcon) {
    this.icon = icon1;
    this.func = func;
    this.parent = parent1;
    this.hoverIcon = hoverIcon;
    this.activate = bind(this.activate, this);
    this._onButtonReleaseEvent = bind(this._onButtonReleaseEvent, this);
    this.setActive = bind(this.setActive, this);
    this._onLeaveEvent = bind(this._onLeaveEvent, this);
    this._update = bind(this._update, this);
    this.active = false;
    TextBoxItem.__super__.constructor.call(this, label);
    this.actor.set_style_class_name("menu-category-button");
    this.actor.add_style_class_name("menu-text-item-button");
    this.actor.connect("leave-event", this._onLeaveEvent);
    this.label.destroy();
    this._triangle.destroy();
    this._triangle = new St.Label();
    this.label_text = label;
    this.label_icon = new St.Icon({
      icon_name: this.icon,
      icon_size: 18,
      icon_type: St.IconType.FULLCOLOR
    });
    this.addActor(this.label_icon);
    this.label = new St.Label({
      text: this.label_text,
      style_class: "menu-category-button-label"
    });
    this.addActor(this.label);
    return;
  }

  TextBoxItem.prototype._update = function(quicklinkOptions) {
    var icon, iconFile, iconFileName;
    this.removeActor(this.label_icon);
    this.removeActor(this.label);
    if (quicklinkOptions === "both" || quicklinkOptions === "icons") {
      this.name_icon = new St.Icon({
        icon_name: this.icon,
        icon_size: (quicklinkOptions === "icons" ? 26 : 18),
        icon_type: St.IconType.FULLCOLOR
      });
      iconFileName = this.icon;
      iconFile = Gio.file_new_for_path(iconFileName);
      icon = void 0;
      if (iconFile.query_exists(null)) {
        icon = new Gio.FileIcon({
          file: iconFile
        });
      } else {
        icon = new Gio.ThemedIcon({
          name: this.icon
        });
      }
      this.label_icon.set_gicon(icon);
      this.label_icon.set_icon_size((quicklinkOptions === "icons" ? 26 : 18));
      if (!iconFile.query_exists(null)) {
        this.label_icon = this.name_icon;
      }
      this.addActor(this.label_icon);
    }
    if (quicklinkOptions === "both" || quicklinkOptions === "labels") {
      this.label = new St.Label({
        text: this.label_text,
        style_class: "menu-category-button-label"
      });
      this.addActor(this.label);
    }
  };

  TextBoxItem.prototype._onLeaveEvent = function() {
    this.hoverIcon.showUser = true;
    Tweener.addTween(this, {
      time: 1,
      onComplete: (function(_this) {
        return function() {
          if (!_this.active) {
            _this.hoverIcon._onUserChanged();
          }
        };
      })(this)
    });
  };

  TextBoxItem.prototype.setActive = function(active) {
    if (active) {
      this.hoverIcon.showUser = false;
      this.actor.set_style_class_name("menu-category-button-selected");
      if (this.parent.quicklinkOptions !== "icons") {
        this.hoverIcon._refresh(this.icon);
      }
    } else {
      this.actor.set_style_class_name("menu-category-button");
    }
  };

  TextBoxItem.prototype._onButtonReleaseEvent = function(actor, event) {
    if (event.get_button() === 1) {
      this.activate(event);
    }
  };

  TextBoxItem.prototype.activate = function(event) {
    eval(this.func);
    this.parent.close();
  };

  return TextBoxItem;

})(AppPopupSubMenuMenuItem);

AllProgramsItem = (function(superClass) {
  extend(AllProgramsItem, superClass);

  function AllProgramsItem(label, icon, parent) {
    this.activate = bind(this.activate, this);
    this._onButtonReleaseEvent = bind(this._onButtonReleaseEvent, this);
    this.setActive = bind(this.setActive, this);
    AllProgramsItem.__super__.constructor.call(this, label);
    this.actor.set_style_class_name("");
    this.box = new St.BoxLayout({
      style_class: "menu-category-button"
    });
    this.parent = parent;
    this.label.destroy();
    this._triangle.destroy();
    this._triangle = new St.Label();
    this.label = new St.Label({
      text: " " + label
    });
    this.icon = new St.Icon({
      style_class: "popup-menu-icon",
      icon_type: St.IconType.FULLCOLOR,
      icon_name: icon,
      icon_size: ICON_SIZE
    });
    this.box.add_actor(this.icon);
    this.box.add_actor(this.label);
    this.addActor(this.box);
    return;
  }

  AllProgramsItem.prototype.setActive = function(active) {
    if (active) {
      this.box.set_style_class_name("menu-category-button-selected");
    } else {
      this.box.set_style_class_name("menu-category-button");
    }
  };

  AllProgramsItem.prototype._onButtonReleaseEvent = function(actor, event) {
    if (event.get_button() === 1) {
      this.activate(event);
    }
  };

  AllProgramsItem.prototype.activate = function(event) {
    if (this.parent.leftPane.get_child() === this.parent.favsBox) {
      this.parent.switchPanes("apps");
    } else {
      this.parent.switchPanes("favs");
    }
  };

  return AllProgramsItem;

})(AppPopupSubMenuMenuItem);

HoverIcon = (function() {
  function HoverIcon(parent, owner) {
    var icon;
    this.owner = owner;
    this._refresh = bind(this._refresh, this);
    this._onUserChanged = bind(this._onUserChanged, this);
    this.actor = new St.Bin();
    this.icon = new St.Icon({
      icon_size: HOVER_ICON_SIZE,
      icon_type: St.IconType.FULLCOLOR,
      style_class: "hover-icon"
    });
    this.actor.cild = this.icon;
    this.showUser = true;
    this.userBox = new St.BoxLayout({
      style_class: "hover-box",
      reactive: true,
      vertical: false
    });
    this._userIcon = new St.Icon({
      style_class: "hover-user-icon"
    });
    this.userBox.connect("button-press-event", (function(_this) {
      return function() {
        parent.toggle();
        Util.spawnCommandLine("cinnamon-settings user");
      };
    })(this));
    this._userIcon.hide();
    this.userBox.add(this.icon, {
      x_fill: true,
      y_fill: false,
      x_align: St.Align.END,
      y_align: St.Align.START
    });
    this.userBox.add(this._userIcon, {
      x_fill: true,
      y_fill: false,
      x_align: St.Align.END,
      y_align: St.Align.START
    });
    this.userLabel = new St.Label({
      style_class: "hover-label"
    });
    this.userBox.add(this.userLabel, {
      x_fill: true,
      y_fill: false,
      x_align: St.Align.END,
      y_align: St.Align.MIDDLE
    });
    icon = new Gio.ThemedIcon({
      name: "avatar-default"
    });
    this._userIcon.set_gicon(icon);
    this._userIcon.show();
    this._user = AccountsService.UserManager.get_default().get_user(GLib.get_user_name());
    this._userLoadedId = this._user.connect("notify::is_loaded", this._onUserChanged);
    this._userChangedId = this._user.connect("changed", this._onUserChanged);
    this._onUserChanged();
    return;
  }

  HoverIcon.prototype._onUserChanged = function() {
    var icon, iconFile, iconFileName;
    if (this._user.is_loaded && this.showUser) {
      this.owner.setName(this._user.get_real_name());
      this.userLabel.set_text("");
      if (this._userIcon) {
        iconFileName = this._user.get_icon_file();
        iconFile = Gio.file_new_for_path(iconFileName);
        icon = void 0;
        if (iconFile.query_exists(null)) {
          icon = new Gio.FileIcon({
            file: iconFile
          });
        } else {
          icon = new Gio.ThemedIcon({
            name: "avatar-default"
          });
        }
        this._userIcon.set_gicon(icon);
        this.icon.hide();
        this._userIcon.show();
      }
    }
  };

  HoverIcon.prototype._refresh = function(icon) {
    var iconFile, iconFileName, newicon;
    this._userIcon.hide();
    iconFileName = icon;
    iconFile = Gio.file_new_for_path(iconFileName);
    newicon = void 0;
    if (iconFile.query_exists(null)) {
      newicon = new Gio.FileIcon({
        file: iconFile
      });
    } else {
      newicon = new Gio.ThemedIcon({
        name: icon
      });
    }
    if (iconFile.query_exists(null)) {
      this.icon.set_gicon(newicon);
    } else {
      this.icon.set_icon_name(icon);
    }
    this.icon.show();
  };

  return HoverIcon;

})();

ShutdownContextMenuItem = (function(superClass) {
  extend(ShutdownContextMenuItem, superClass);

  function ShutdownContextMenuItem(parentMenu, menu, label, action) {
    this.parentMenu = parentMenu;
    this.activate = bind(this.activate, this);
    ShutdownContextMenuItem.__super__.constructor.call(this, menu, label, action);
    this._screenSaverProxy = new ScreenSaver.ScreenSaverProxy();
    return;
  }

  ShutdownContextMenuItem.prototype.activate = function(event) {
    var screensaver_dialog, screensaver_settings;
    switch (this._action) {
      case "logout":
        Session.LogoutRemote(0);
        break;
      case "lock":
        screensaver_settings = new Gio.Settings({
          schema: "org.cinnamon.desktop.screensaver"
        });
        screensaver_dialog = Gio.file_new_for_path("/usr/bin/cinnamon-screensaver-command");
        if (screensaver_dialog.query_exists(null)) {
          if (screensaver_settings.get_boolean("ask-for-away-message")) {
            Util.spawnCommandLine("cinnamon-screensaver-lock-dialog");
          } else {
            Util.spawnCommandLine("cinnamon-screensaver-command --lock");
          }
        } else {
          this._screenSaverProxy.LockRemote();
        }
    }
    this._appButton.toggle();
    this.parentMenu.toggle();
    return false;
  };

  return ShutdownContextMenuItem;

})(ApplicationContextMenuItem);

ShutdownMenu = (function(superClass) {
  extend(ShutdownMenu, superClass);

  function ShutdownMenu(parent1, hoverIcon) {
    var menuItem;
    this.parent = parent1;
    this.hoverIcon = hoverIcon;
    this._onButtonReleaseEvent = bind(this._onButtonReleaseEvent, this);
    this.setActive = bind(this.setActive, this);
    ShutdownMenu.__super__.constructor.call(this, "");
    this.actor.set_style_class_name("menu-category-button");
    this.label.destroy();
    this._triangle.destroy();
    this._triangle = new St.Label();
    this.icon = new St.Icon({
      style_class: "popup-menu-icon",
      icon_type: St.IconType.FULLCOLOR,
      icon_name: "forward",
      icon_size: ICON_SIZE
    });
    this.addActor(this.icon);
    this.menu = new PopupMenu.PopupSubMenu(this.actor);
    this.menu.actor.remove_style_class_name("popup-sub-menu");
    menuItem = void 0;
    menuItem = new ShutdownContextMenuItem(this.parent, this.menu, _("Logout"), "logout");
    this.menu.addMenuItem(menuItem);
    menuItem = new ShutdownContextMenuItem(this.parent, this.menu, _("Lock Screen"), "lock");
    this.menu.addMenuItem(menuItem);
    return;
  }

  ShutdownMenu.prototype.setActive = function(active) {
    if (active) {
      this.actor.set_style_class_name("menu-category-button-selected");
      this.hoverIcon._refresh("system-log-out");
    } else {
      this.actor.set_style_class_name("menu-category-button");
    }
  };

  ShutdownMenu.prototype._onButtonReleaseEvent = function(actor, event) {
    if (event.get_button() === 1) {
      this.menu.toggle();
    }
  };

  return ShutdownMenu;

})(AppPopupSubMenuMenuItem);

CategoriesApplicationsBox = (function() {
  function CategoriesApplicationsBox() {
    this.acceptDrop = bind(this.acceptDrop, this);
    this.actor = new St.BoxLayout();
    this.actor._delegate = this;
    return;
  }

  CategoriesApplicationsBox.prototype.acceptDrop = function(source, actor, x, y, time) {
    if (source instanceof FavoritesButton) {
      source.actor.destroy();
      actor.destroy();
      AppFavorites.getAppFavorites().removeFavorite(source.app.get_id());
      return true;
    }
    return false;
  };

  return CategoriesApplicationsBox;

})();

RightButtonsBox = (function() {
  function RightButtonsBox(appsMenuButton, menu) {
    this._allocate = bind(this._allocate, this);
    this._getPreferredWidth = bind(this._getPreferredWidth, this);
    this._getPreferredHeight = bind(this._getPreferredHeight, this);
    this.addItems = bind(this.addItems, this);
    this._update_quicklinks = bind(this._update_quicklinks, this);
    this.setName = bind(this.setName, this);
    this.appsMenuButton = appsMenuButton;
    this.actor = new St.BoxLayout();
    this.itemsBox = new St.BoxLayout({
      vertical: true
    });
    this.shutDownMenuBox = new St.BoxLayout({
      vertical: true
    });
    this.shutDownIconBox = new St.BoxLayout({
      vertical: true
    });
    this.shutdownBox = new St.BoxLayout({
      vertical: false
    });
    this.actor._delegate = this;
    this.menu = menu;
    this.addItems();
    this._container = new Cinnamon.GenericContainer();
    this.actor.add_actor(this._container);
    this._container.connect("get-preferred-height", this._getPreferredHeight);
    this._container.connect("get-preferred-width", this._getPreferredWidth);
    this._container.connect("allocate", this._allocate);
    this._container.add_actor(this.itemsBox);
    this.userName = "";
    return;
  }

  RightButtonsBox.prototype.setName = function(name) {
    this.userName = name;
    this.userLink.label.text = name[0].toUpperCase() + name.slice(1);
  };

  RightButtonsBox.prototype._update_quicklinks = function(quicklinkOptions) {
    var i;
    for (i in this.quicklinks) {
      this.quicklinks[i]._update(quicklinkOptions);
    }
    this.shutdown._update(quicklinkOptions);
    this.logout._update(quicklinkOptions);
    this.lock._update(quicklinkOptions);
    if (quicklinkOptions === "icons") {
      this.hoverIcon.userLabel.hide();
      this.hoverIcon._userIcon.set_icon_size(22);
      this.hoverIcon.icon.set_icon_size(22);
      this.shutDownMenuBox.set_style("min-height: 1px");
      this.shutdownMenu.actor.hide();
      this.shutdownBox.remove_actor(this.shutdownMenu.actor);
    } else {
      this.hoverIcon.userLabel.show();
      this.hoverIcon._userIcon.set_icon_size(HOVER_ICON_SIZE);
      this.hoverIcon.icon.set_icon_size(HOVER_ICON_SIZE);
      this.shutDownIconBox.hide();
      this.shutdownMenu.actor.show();
      this.shutDownMenuBox.set_style("min-height: 82px");
      this.shutdownBox.add_actor(this.shutdownMenu.actor);
    }
  };

  RightButtonsBox.prototype.addItems = function() {
    var i, screensaver_dialog, screensaver_settings, split;
    this.itemsBox.destroy_all_children();
    this.shutdownBox.destroy_all_children();
    this.hoverIcon = new HoverIcon(this.menu, this);
    this.itemsBox.add_actor(this.hoverIcon.userBox);
    this.quicklinks = [];
    for (i in this.menu.quicklinks) {
      if (this.menu.quicklinks[i] !== "") {
        if (this.menu.quicklinks[i] === "separator") {
          this.separator = new PopupMenu.PopupSeparatorMenuItem();
          this.separator.actor.set_style("padding: 0em 0em; min-width: 1px;");
          this.itemsBox.add_actor(this.separator.actor);
        } else {
          split = this.menu.quicklinks[i].split(",");
          if (split.length === 3) {
            this.quicklinks[i] = new TextBoxItem(_(split[0]), split[1], "Util.spawnCommandLine('" + split[2] + "')", this.menu, this.hoverIcon, false);
            if (split[0] === 'Home') {
              this.userLink = this.quicklinks[i];
            }
            this.itemsBox.add_actor(this.quicklinks[i].actor);
          }
        }
      }
    }
    this.shutdown = new TextBoxItem(_("Shutdown"), "system-shutdown", "Session.ShutdownRemote()", this.menu, this.hoverIcon, false);
    this.logout = new TextBoxItem(_("Logout"), "gnome-logout", "Session.LogoutRemote(0)", this.menu, this.hoverIcon, false);
    screensaver_settings = new Gio.Settings({
      schema: "org.cinnamon.desktop.screensaver"
    });
    screensaver_dialog = Gio.file_new_for_path("/usr/bin/cinnamon-screensaver-command");
    if (screensaver_dialog.query_exists(null)) {
      if (screensaver_settings.get_boolean("ask-for-away-message")) {
        this.lock = new TextBoxItem(_("Lock"), "gnome-lockscreen", "Util.spawnCommandLine('cinnamon-screensaver-lock-dialog')", this.menu, this.hoverIcon, false);
      } else {
        this.lock = new TextBoxItem(_("Lock"), "gnome-lockscreen", "Util.spawnCommandLine('cinnamon-screensaver-command --lock')", this.menu, this.hoverIcon, false);
      }
    }
    this.shutdownMenu = new ShutdownMenu(this.menu, this.hoverIcon);
    this.shutdownBox.add_actor(this.shutdown.actor);
    this.shutdownBox.add_actor(this.shutdownMenu.actor);
    this.shutDownMenuBox.add_actor(this.shutdownBox);
    this.shutDownMenuBox.add_actor(this.shutdownMenu.menu.actor);
    this.shutDownIconBox.add_actor(this.logout.actor);
    this.shutDownIconBox.add_actor(this.lock.actor);
    this.itemsBox.add_actor(this.shutDownMenuBox);
    this.shutDownMenuBox.set_style("min-height: 82px");
    this.itemsBox.add_actor(this.shutDownIconBox);
  };

  RightButtonsBox.prototype._getPreferredHeight = function(actor, forWidth, alloc) {
    var minSize, naturalSize, t;
    t = this.itemsBox.get_preferred_height(forWidth);
    minSize = t[0];
    naturalSize = t[1];
    alloc.min_size = minSize;
    alloc.natural_size = naturalSize;
  };

  RightButtonsBox.prototype._getPreferredWidth = function(actor, forHeight, alloc) {
    var minSize, naturalSize, t;
    t = this.itemsBox.get_preferred_width(forHeight);
    minSize = t[0];
    naturalSize = t[1];
    alloc.min_size = minSize;
    alloc.natural_size = naturalSize;
  };

  RightButtonsBox.prototype._allocate = function(actor, box, flags) {
    var childBox, mainBoxHeight, minHeight, minWidth, naturalHeight, naturalWidth, t;
    childBox = new Clutter.ActorBox();
    t = this.itemsBox.get_preferred_size();
    minWidth = t[0];
    minHeight = t[1];
    naturalWidth = t[2];
    naturalHeight = t[3];
    childBox.y1 = 0;
    childBox.y2 = childBox.y1 + naturalHeight;
    childBox.x1 = 0;
    childBox.x2 = childBox.x1 + naturalWidth;
    this.itemsBox.allocate(childBox, flags);
    mainBoxHeight = this.appsMenuButton.mainBox.get_height();
  };

  return RightButtonsBox;

})();

FavoritesBox = (function() {
  function FavoritesBox() {
    this.acceptDrop = bind(this.acceptDrop, this);
    this.handleDragOver = bind(this.handleDragOver, this);
    this._clearDragPlaceholder = bind(this._clearDragPlaceholder, this);
    this.actor = new St.BoxLayout({
      vertical: true
    });
    this.actor._delegate = this;
    this._dragPlaceholder = null;
    this._dragPlaceholderPos = -1;
    this._animatingPlaceholdersCount = 0;
    return;
  }

  FavoritesBox.prototype._clearDragPlaceholder = function() {
    if (this._dragPlaceholder) {
      this._dragPlaceholder.animateOutAndDestroy();
      this._dragPlaceholder = null;
      this._dragPlaceholderPos = -1;
    }
  };

  FavoritesBox.prototype.handleDragOver = function(source, actor, x, y, time) {
    var app, appChildren, boxHeight, children, fadeIn, favPos, favorites, numChildren, numFavorites, pos, srcIsFavorite;
    app = source.app;
    if ((app == null) || app.is_window_backed() || ((!(source instanceof FavoritesButton)) && app.get_id() in AppFavorites.getAppFavorites().getFavoriteMap())) {
      return DND.DragMotionResult.NO_DROP;
    }
    favorites = AppFavorites.getAppFavorites().getFavorites();
    numFavorites = favorites.length;
    favPos = favorites.indexOf(app);
    children = this.actor.get_children();
    numChildren = children.length;
    boxHeight = this.actor.height;
    if (this._dragPlaceholder) {
      boxHeight -= this._dragPlaceholder.actor.height;
      numChildren--;
    }
    pos = Math.round(y * numFavorites / boxHeight);
    if (pos !== this._dragPlaceholderPos && pos <= numFavorites) {
      if (this._animatingPlaceholdersCount > 0) {
        appChildren = children.filter((function(_this) {
          return function(actor) {
            return actor._delegate instanceof FavoritesButton;
          };
        })(this));
        this._dragPlaceholderPos = children.indexOf(appChildren[pos]);
      } else {
        this._dragPlaceholderPos = pos;
      }
      if (favPos !== -1 && (pos === favPos || pos === favPos + 1)) {
        if (this._dragPlaceholder) {
          this._dragPlaceholder.animateOutAndDestroy();
          this._animatingPlaceholdersCount++;
          this._dragPlaceholder.actor.connect("destroy", (function(_this) {
            return function() {
              _this._animatingPlaceholdersCount--;
            };
          })(this));
        }
        this._dragPlaceholder = null;
        return DND.DragMotionResult.CONTINUE;
      }
      fadeIn = void 0;
      if (this._dragPlaceholder) {
        this._dragPlaceholder.actor.destroy();
        fadeIn = false;
      } else {
        fadeIn = true;
      }
      this._dragPlaceholder = new DND.GenericDragPlaceholderItem();
      this._dragPlaceholder.child.set_width(source.actor.height);
      this._dragPlaceholder.child.set_height(source.actor.height);
      this.actor.insert_actor(this._dragPlaceholder.actor, this._dragPlaceholderPos);
      if (fadeIn) {
        this._dragPlaceholder.animateIn();
      }
    }
    srcIsFavorite = favPos !== -1;
    if (srcIsFavorite) {
      return DND.DragMotionResult.MOVE_DROP;
    }
    return DND.DragMotionResult.COPY_DROP;
  };

  FavoritesBox.prototype.acceptDrop = function(source, actor, x, y, time) {
    var app, childId, children, favPos, favorites, i, id, srcIsFavorite;
    app = source.app;
    if ((app == null) || app.is_window_backed()) {
      return false;
    }
    id = app.get_id();
    favorites = AppFavorites.getAppFavorites().getFavoriteMap();
    srcIsFavorite = id in favorites;
    favPos = 0;
    children = this.actor.get_children();
    i = 0;
    while (i < this._dragPlaceholderPos) {
      if (this._dragPlaceholder && children[i] === this._dragPlaceholder.actor) {
        continue;
      }
      if (!(children[i]._delegate instanceof FavoritesButton)) {
        continue;
      }
      childId = children[i]._delegate.app.get_id();
      if (childId === id) {
        continue;
      }
      if (childId in favorites) {
        favPos++;
      }
      i++;
    }
    Meta.later_add(Meta.LaterType.BEFORE_REDRAW, (function(_this) {
      return function() {
        var appFavorites;
        appFavorites = AppFavorites.getAppFavorites();
        if (srcIsFavorite) {
          appFavorites.moveFavoriteToPos(id, favPos);
        } else {
          appFavorites.addFavoriteAtPos(id, favPos);
        }
        return false;
      };
    })(this));
    return true;
  };

  return FavoritesBox;

})();

MyApplet = (function() {
  MyApplet.prototype.__proto__ = Applet.TextIconApplet.prototype;

  function MyApplet(orientation, panel_height, instance_id) {
    this._run = bind(this._run, this);
    this._getCompletions = bind(this._getCompletions, this);
    this._getCompletion = bind(this._getCompletion, this);
    this._doSearch = bind(this._doSearch, this);
    this._listApplications = bind(this._listApplications, this);
    this._listDevices = bind(this._listDevices, this);
    this._listBookmarks = bind(this._listBookmarks, this);
    this._onSearchTextChanged = bind(this._onSearchTextChanged, this);
    this.resetSearch = bind(this.resetSearch, this);
    this._setCategoriesButtonActive = bind(this._setCategoriesButtonActive, this);
    this._displayButtons = bind(this._displayButtons, this);
    this._onApplicationButtonRealized = bind(this._onApplicationButtonRealized, this);
    this.closeApplicationsContextMenus = bind(this.closeApplicationsContextMenus, this);
    this._select_category = bind(this._select_category, this);
    this._clearAllSelections = bind(this._clearAllSelections, this);
    this._update_autoscroll = bind(this._update_autoscroll, this);
    this._updateVFade = bind(this._updateVFade, this);
    this.switchPanes = bind(this.switchPanes, this);
    this._display = bind(this._display, this);
    this._scrollToCategoryButton = bind(this._scrollToCategoryButton, this);
    this._scrollToButton = bind(this._scrollToButton, this);
    this.find_dupe = bind(this.find_dupe, this);
    this._appEnterEvent = bind(this._appEnterEvent, this);
    this._appLeaveEvent = bind(this._appLeaveEvent, this);
    this._loadCategory = bind(this._loadCategory, this);
    this._refreshFavs = bind(this._refreshFavs, this);
    this._refreshApps = bind(this._refreshApps, this);
    this._appletStyles = bind(this._appletStyles, this);
    this._clearPrevCatSelection = bind(this._clearPrevCatSelection, this);
    this._clearPrevAppSelection = bind(this._clearPrevAppSelection, this);
    this._addEnterEvent = bind(this._addEnterEvent, this);
    this._onMenuKeyPress = bind(this._onMenuKeyPress, this);
    this._updateIconAndLabel = bind(this._updateIconAndLabel, this);
    this.destroy = bind(this.destroy, this);
    this._onOpenStateChanged = bind(this._onOpenStateChanged, this);
    this._onSourceKeyPress = bind(this._onSourceKeyPress, this);
    this.on_applet_clicked = bind(this.on_applet_clicked, this);
    this._launch_editor = bind(this._launch_editor, this);
    this.on_orientation_changed = bind(this.on_orientation_changed, this);
    this._update_hover_delay = bind(this._update_hover_delay, this);
    this._updateQuickLinks = bind(this._updateQuickLinks, this);
    this._updateQuickLinksShutdownView = bind(this._updateQuickLinksShutdownView, this);
    this._updateQuickLinksView = bind(this._updateQuickLinksView, this);
    this._updateActivateOnHover = bind(this._updateActivateOnHover, this);
    this.openMenu = bind(this.openMenu, this);
    var e, error;
    Applet.TextIconApplet.prototype._init.call(this, orientation, panel_height, instance_id);
    try {
      this.set_applet_tooltip(_("Start"));
      this.menuManager = new PopupMenu.PopupMenuManager(this);
      this.menu = new Applet.AppletPopupMenu(this, orientation);
      this.menuManager.addMenu(this.menu);
      this.actor.connect("key-press-event", this._onSourceKeyPress);
      this.settings = new Settings.AppletSettings(this, "Cin7Menu@darkoverlordofdata.com", instance_id);
      this.settings.bindProperty(Settings.BindingDirection.IN, "show-computer", "showComputer", this._updateQuickLinks, null);
      this.settings.bindProperty(Settings.BindingDirection.IN, "show-connection", "showConnection", this._updateQuickLinks, null);
      this.settings.bindProperty(Settings.BindingDirection.IN, "show-control-panel", "showSettings", this._updateQuickLinks, null);
      this.settings.bindProperty(Settings.BindingDirection.IN, "show-default-programs", "showDefaults", this._updateQuickLinks, null);
      this.settings.bindProperty(Settings.BindingDirection.IN, "show-devices", "showDevices", this._updateQuickLinks, null);
      this.settings.bindProperty(Settings.BindingDirection.IN, "show-documents", "showDocuments", this._updateQuickLinks, null);
      this.settings.bindProperty(Settings.BindingDirection.IN, "show-downloads", "showDownloads", this._updateQuickLinks, null);
      this.settings.bindProperty(Settings.BindingDirection.IN, "show-favorites", "showFavorites", this._updateQuickLinks, null);
      this.settings.bindProperty(Settings.BindingDirection.IN, "show-games", "showGames", this._updateQuickLinks, null);
      this.settings.bindProperty(Settings.BindingDirection.IN, "show-help", "showHelp", this._updateQuickLinks, null);
      this.settings.bindProperty(Settings.BindingDirection.IN, "show-homegroup", "showHomegroup", this._updateQuickLinks, null);
      this.settings.bindProperty(Settings.BindingDirection.IN, "show-music", "showMusic", this._updateQuickLinks, null);
      this.settings.bindProperty(Settings.BindingDirection.IN, "show-network", "showNetwork", this._updateQuickLinks, null);
      this.settings.bindProperty(Settings.BindingDirection.IN, "show-personal", "showPersonal", this._updateQuickLinks, null);
      this.settings.bindProperty(Settings.BindingDirection.IN, "show-pictures", "showPictures", this._updateQuickLinks, null);
      this.settings.bindProperty(Settings.BindingDirection.IN, "show-recent", "showRecent", this._refreshPlacesAndRecent, null);
      this.settings.bindProperty(Settings.BindingDirection.IN, "show-run", "showRun", this._updateQuickLinks, null);
      this.settings.bindProperty(Settings.BindingDirection.IN, "show-videos", "showVideos", this._updateQuickLinks, null);
      this.settings.bindProperty(Settings.BindingDirection.IN, "show-places", "showPlaces", this._refreshPlacesAndRecent, null);
      this.settings.bindProperty(Settings.BindingDirection.IN, "activate-on-hover", "activateOnHover", this._updateActivateOnHover, null);
      this._updateActivateOnHover();
      this.menu.actor.add_style_class_name("menu-background");
      this._updateIconAndLabel();
      this._searchInactiveIcon = new St.Icon({
        style_class: "menu-search-entry-icon",
        icon_name: "edit-find",
        icon_type: St.IconType.SYMBOLIC
      });
      this._searchActiveIcon = new St.Icon({
        style_class: "menu-search-entry-icon",
        icon_name: "edit-clear",
        icon_type: St.IconType.SYMBOLIC
      });
      this._searchIconClickedId = 0;
      this._applicationsButtons = new Array();
      this._favoritesButtons = new Array();
      this._placesButtons = new Array();
      this._transientButtons = new Array();
      this._recentButtons = new Array();
      this._selectedItemIndex = null;
      this._previousTreeItemIndex = null;
      this._previousSelectedActor = null;
      this._previousTreeSelectedActor = null;
      this._activeContainer = null;
      this._activeActor = null;
      this._applicationsBoxWidth = 0;
      this.menuIsOpening = false;
      this.RecentManager = new DocInfo.DocManager();
      this._display();
      this.menu.connect("open-state-changed", this._onOpenStateChanged);
      appsys.connect("installed-changed", this._refreshApps);
      AppFavorites.getAppFavorites().connect("changed", this._refreshFavs);
      this.settings.bindProperty(Settings.BindingDirection.IN, "hover-delay", "hover_delay_ms", this._update_hover_delay, null);
      this._update_hover_delay();
      this.settings.bindProperty(Settings.BindingDirection.IN, "show-quicklinks", "showQuicklinks", this._updateQuickLinksView, null);
      this._updateQuickLinksView();
      this.settings.bindProperty(Settings.BindingDirection.IN, "show-quicklinks-shutdown-menu", "showQuicklinksShutdownMenu", this._updateQuickLinksShutdownView, null);
      this._updateQuickLinksShutdownView();
      Main.placesManager.connect("places-updated", this._refreshApps);
      this.RecentManager.connect("changed", this._refreshApps);
      this._fileFolderAccessActive = false;
      this._pathCompleter = new Gio.FilenameCompleter();
      this._pathCompleter.set_dirs_only(false);
      this.lastAcResults = new Array();
      this.settings.bindProperty(Settings.BindingDirection.IN, "search-filesystem", "searchFilesystem", null, null);
      this.settings.bindProperty(Settings.BindingDirection.IN, "quicklink-options", "quicklinkOptions", this._updateQuickLinks, null);
      this._updateQuickLinks();
    } catch (error) {
      e = error;
      global.logError(e);
    }
    return;
  }

  MyApplet.prototype.openMenu = function() {
    this.menu.open(true);
  };

  MyApplet.prototype._updateActivateOnHover = function() {
    if (this._openMenuId) {
      this.actor.disconnect(this._openMenuId);
      this._openMenuId = 0;
    }
    if (this.activateOnHover) {
      this._openMenuId = this.actor.connect("enter-event", this.openMenu);
    }
  };

  MyApplet.prototype._updateQuickLinksView = function() {
    this.menu.showQuicklinks = this.showQuicklinks;
    if (this.menu.showQuicklinks) {
      this.rightButtonsBox.actor.show();
    } else {
      this.rightButtonsBox.actor.hide();
    }
  };

  MyApplet.prototype._updateQuickLinksShutdownView = function() {
    this.menu.showQuicklinksShutdownMenu = this.showQuicklinksShutdownMenu;
    if (this.menu.showQuicklinksShutdownMenu) {
      this.rightButtonsBox.shutdown.actor.show();
      this.rightButtonsBox.shutdownMenu.actor.show();
      if (this.quicklinkOptions !== "icons") {
        this.rightButtonsBox.shutDownMenuBox.set_style("min-height: 82px");
      } else {
        this.rightButtonsBox.shutDownIconBox.show();
      }
    } else {
      this.rightButtonsBox.shutdown.actor.hide();
      this.rightButtonsBox.shutdownMenu.actor.hide();
      this.rightButtonsBox.shutDownIconBox.hide();
      this.rightButtonsBox.shutDownMenuBox.set_style("min-height: 1px");
    }
    this.favsBox.style = "min-height: " + (this.rightButtonsBox.actor.get_height() - 100) + "px;min-width: 235px;";
  };

  MyApplet.prototype._updateQuickLinks = function() {
    this.menu.quicklinks = [];
    switch (this.showPersonal) {
      case "link":
        this.menu.quicklinks.push("Home,folder-home,nemo");
        break;
      case "menu":
        this.menu.quicklinks.push("Home,folder-home,nemo");
    }
    switch (this.showDocuments) {
      case "link":
        this.menu.quicklinks.push("Documents,folder-documents,nemo Documents");
        break;
      case "menu":
        this.menu.quicklinks.push("Documents,folder-documents,nemo Documents");
    }
    switch (this.showPictures) {
      case "link":
        this.menu.quicklinks.push("Pictures,folder-pictures,nemo Pictures");
        break;
      case "menu":
        this.menu.quicklinks.push("Pictures,folder-pictures,nemo Pictures");
    }
    switch (this.showMusic) {
      case "link":
        this.menu.quicklinks.push("Music,folder-music,nemo Music");
        break;
      case "menu":
        this.menu.quicklinks.push("Music,folder-music,nemo Music");
    }
    switch (this.showVideos) {
      case "link":
        this.menu.quicklinks.push("Videos,folder-videos,nemo Videos");
        break;
      case "menu":
        this.menu.quicklinks.push("Videos,folder-videos,nemo Videos");
    }
    switch (this.showDownloads) {
      case "link":
        this.menu.quicklinks.push("Downloads,folder-downloads,nemo Downloads");
        break;
      case "menu":
        this.menu.quicklinks.push("Downloads,folder-downloads,nemo Downloads");
    }
    this.menu.quicklinks.push("separator");
    switch (this.showGames) {
      case "link":
        this.menu.quicklinks.push("Games,games,nemo games");
        break;
      case "menu":
        this.menu.quicklinks.push("Games,games,nemo games");
    }
    switch (this.showComputer) {
      case "link":
        this.menu.quicklinks.push("Computer,computer,nemo computer:///");
        break;
      case "menu":
        this.menu.quicklinks.push("Computer,computer,nemo computer:///");
    }
    this.menu.quicklinks.push("Software Manager,package-manager,gksu mintinstall");
    if (this.showConnection) {
      this.menu.quicklinks.push("Connect To,network,cinnamon-settings network");
    }
    if (this.showNetwork) {
      this.menu.quicklinks.push("Network,network,nemo network:///");
    }
    this.menu.quicklinks.push("separator");
    switch (this.showSettings) {
      case "link":
        this.menu.quicklinks.push("Control Panel,control-center2,cinnamon-settings");
        break;
      case "menu":
        this.menu.quicklinks.push("Control Panel,control-center2,cinnamon-settings");
    }
    if (this.showDevices) {
      this.menu.quicklinks.push("Printers,printers,system-config-printer");
    }
    if (this.showDefaults) {
      this.menu.quicklinks.push("Default Programs,network,cinnamon-settings default");
    }
    if (this.showHelp) {
      this.menu.quicklinks.push("Help,help,yelp");
    }
    if (this.showRun) {
      this.menu.quicklinks.push("Terminal,terminal,gnome-terminal");
    }
    if (this.showQuicklinksShutdownMenu) {
      this.menu.quicklinks.push("separator");
    }
    this.menu.quicklinkOptions = this.quicklinkOptions;
    this.rightButtonsBox.addItems();
    this.rightButtonsBox._update_quicklinks(this.quicklinkOptions);
    this._updateQuickLinksShutdownView();
    this.favsBox.style = "min-height: " + (this.rightButtonsBox.actor.get_height() - 100) + "px;min-width: 235px;";
  };

  MyApplet.prototype._update_hover_delay = function() {
    this.hover_delay = this.hover_delay_ms / 1000;
  };

  MyApplet.prototype.on_orientation_changed = function(orientation) {
    this.menu.destroy();
    this.menu = new Applet.AppletPopupMenu(this, orientation);
    this.menuManager.addMenu(this.menu);
    this.menu.actor.add_style_class_name("menu-background");
    this.menu.connect("open-state-changed", this._onOpenStateChanged);
    this._display();
    this._updateQuickLinksShutdownView();
    this._updateQuickLinks();
  };

  MyApplet.prototype._launch_editor = function() {
    Util.spawnCommandLine("cinnamon-menu-editor");
  };

  MyApplet.prototype.on_applet_clicked = function(event) {
    this.menu.toggle();
  };

  MyApplet.prototype._onSourceKeyPress = function(actor, event) {
    var symbol;
    symbol = event.get_key_symbol();
    if (symbol === Clutter.KEY_space || symbol === Clutter.KEY_Return) {
      this.menu.toggle();
      return true;
    } else if (symbol === Clutter.KEY_Escape && this.menu.isOpen) {
      this.menu.close();
      return true;
    } else if (symbol === Clutter.KEY_Down) {
      if (!this.menu.isOpen) {
        this.menu.toggle();
      }
      this.menu.actor.navigate_focus(this.actor, Gtk.DirectionType.DOWN, false);
      return true;
    } else {
      return false;
    }
  };

  MyApplet.prototype._onOpenStateChanged = function(menu, open) {
    var monitorHeight;
    if (open) {
      this.menuIsOpening = true;
      this.actor.add_style_pseudo_class("active");
      this.switchPanes("favs");
      this._appletStyles();
      global.stage.set_key_focus(this.searchEntry);
      this._selectedItemIndex = null;
      this._activeContainer = null;
      this._activeActor = null;
      monitorHeight = Main.layoutManager.primaryMonitor.height;
      this._select_category(null, this._allAppsCategoryButton);
    } else {
      this.actor.remove_style_pseudo_class("active");
      if (this.searchActive) {
        this.resetSearch();
      }
      this.selectedAppTitle.set_text("");
      this.selectedAppDescription.set_text("");
      this._previousTreeItemIndex = null;
      this._previousTreeSelectedActor = null;
      this._previousSelectedActor = null;
      this.closeApplicationsContextMenus(null, false);
      this._clearAllSelections();
    }
  };

  MyApplet.prototype.destroy = function() {
    this.actor._delegate = null;
    this.menu.destroy();
    this.actor.destroy();
    this.emit("destroy");
  };

  MyApplet.prototype._updateIconAndLabel = function() {
    var e, error, menuIcon, menuLabel;
    menuLabel = "";
    menuIcon = ".local/share/cinnamon/applets/Cin7Menu@darkoverlordofdata.com/icon.png";
    this.set_applet_label(menuLabel);
    try {
      this.set_applet_icon_path(menuIcon);
    } catch (error) {
      e = error;
      global.logWarning("Could not load icon file \"" + menuIcon + "\" for menu button");
    }
  };

  MyApplet.prototype._onMenuKeyPress = function(actor, event) {
    var index, item_actor, postfix, prefix, symbol, text;
    symbol = event.get_key_symbol();
    item_actor = void 0;
    index = 0;
    this.appBoxIter.reloadVisible();
    this.catBoxIter.reloadVisible();
    if (symbol === Clutter.KEY_Super_L && this.menu.isOpen) {
      this.menu.close();
      return true;
    }
    index = this._selectedItemIndex;
    if (this._activeContainer === null && symbol === Clutter.KEY_Up) {
      this._activeContainer = this.applicationsBox;
      item_actor = this.appBoxIter.getLastVisible();
      index = this.appBoxIter.getAbsoluteIndexOfChild(item_actor);
    } else if (this._activeContainer === null && symbol === Clutter.KEY_Down) {
      this._activeContainer = this.applicationsBox;
      item_actor = this.appBoxIter.getFirstVisible();
      index = this.appBoxIter.getAbsoluteIndexOfChild(item_actor);
    } else if (symbol === Clutter.KEY_Up) {
      if (this._activeContainer === this.applicationsBox) {
        this._previousSelectedActor = this.applicationsBox.get_child_at_index(index);
        item_actor = this.appBoxIter.getPrevVisible(this._previousSelectedActor);
        index = this.appBoxIter.getAbsoluteIndexOfChild(item_actor);
      } else {
        this._previousSelectedActor = this.categoriesBox.get_child_at_index(index);
        this._previousSelectedActor._delegate.isHovered = false;
        item_actor = this.catBoxIter.getPrevVisible(this._activeActor);
        index = this.catBoxIter.getAbsoluteIndexOfChild(item_actor);
      }
    } else if (symbol === Clutter.KEY_Down) {
      if (this._activeContainer === this.applicationsBox) {
        this._previousSelectedActor = this.applicationsBox.get_child_at_index(index);
        item_actor = this.appBoxIter.getNextVisible(this._previousSelectedActor);
        index = this.appBoxIter.getAbsoluteIndexOfChild(item_actor);
      } else {
        this._previousSelectedActor = this.categoriesBox.get_child_at_index(index);
        this._previousSelectedActor._delegate.isHovered = false;
        item_actor = this.catBoxIter.getNextVisible(this._activeActor);
        index = this.catBoxIter.getAbsoluteIndexOfChild(item_actor);
      }
    } else if (symbol === Clutter.KEY_Right && (this._activeContainer !== this.applicationsBox)) {
      item_actor = this.appBoxIter.getFirstVisible();
      index = this.appBoxIter.getAbsoluteIndexOfChild(item_actor);
    } else if (symbol === Clutter.KEY_Left && this._activeContainer === this.applicationsBox && !this.searchActive) {
      this._previousSelectedActor = this.applicationsBox.get_child_at_index(index);
      item_actor = ((this._previousTreeSelectedActor != null) ? this._previousTreeSelectedActor : this.catBoxIter.getFirstVisible());
      index = this.catBoxIter.getAbsoluteIndexOfChild(item_actor);
    } else if (this._activeContainer === this.applicationsBox && (symbol === Clutter.KEY_Return || symbol === Clutter.KP_Enter)) {
      item_actor = this.applicationsBox.get_child_at_index(this._selectedItemIndex);
      item_actor._delegate.activate();
      return true;
    } else if (this.searchFilesystem && (this._fileFolderAccessActive || symbol === Clutter.slash)) {
      if (symbol === Clutter.Return || symbol === Clutter.KP_Enter) {
        if (this._run(this.searchEntry.get_text())) {
          this.menu.close();
        }
        return true;
      }
      if (symbol === Clutter.Escape) {
        this.searchEntry.set_text("");
        this._fileFolderAccessActive = false;
      }
      if (symbol === Clutter.slash) {
        text = this.searchEntry.get_text().concat("/a");
        prefix = void 0;
        if (text.lastIndexOf(" ") === -1) {
          prefix = text;
        } else {
          prefix = text.substr(text.lastIndexOf(" ") + 1);
        }
        this._getCompletion(prefix);
        return false;
      }
      if (symbol === Clutter.Tab) {
        text = actor.get_text();
        prefix = void 0;
        if (text.lastIndexOf(" ") === -1) {
          prefix = text;
        } else {
          prefix = text.substr(text.lastIndexOf(" ") + 1);
        }
        postfix = this._getCompletion(prefix);
        if ((postfix != null) && postfix.length > 0) {
          actor.insert_text(postfix, -1);
          actor.set_cursor_position(text.length + postfix.length);
          if (postfix[postfix.length - 1] === "/") {
            this._getCompletion(text + postfix + "a");
          }
        }
        return true;
      }
      return false;
    } else {
      return false;
    }
    this._selectedItemIndex = index;
    if (!item_actor || item_actor === this.searchEntry) {
      return false;
    }
    item_actor._delegate.emit("enter-event");
    return true;
  };

  MyApplet.prototype._addEnterEvent = function(button, callback) {
    var _callback;
    _callback = (function(_this) {
      return function() {
        var _maybePreviousActor, parent;
        parent = button.actor.get_parent();
        if (_this._activeContainer !== _this.applicationsBox && parent !== _this._activeContainer) {
          _this._previousTreeItemIndex = _this._selectedItemIndex;
          _this._previousTreeSelectedActor = _this._activeActor;
          _this._previousSelectedActor = null;
        }
        if (_this._previousTreeSelectedActor && _this._activeContainer !== _this.categoriesBox && parent !== _this._activeContainer && button !== _this._previousTreeSelectedActor) {
          _this._previousTreeSelectedActor.style_class = "menu-category-button";
        }
        if (parent !== _this._activeContainer) {
          parent._vis_iter.reloadVisible();
        }
        _maybePreviousActor = _this._activeActor;
        if (_maybePreviousActor && _this._activeContainer === _this.applicationsBox) {
          _this._previousSelectedActor = _maybePreviousActor;
          _this._clearPrevAppSelection();
        }
        if (parent === _this.categoriesBox && !_this.searchActive) {
          _this._previousSelectedActor = _maybePreviousActor;
          _this._clearPrevCatSelection();
        }
        _this._activeContainer = parent;
        _this._activeActor = button.actor;
        _this._selectedItemIndex = _this._activeContainer._vis_iter.getAbsoluteIndexOfChild(_this._activeActor);
        callback();
      };
    })(this);
    button.connect("enter-event", _callback);
    button.actor.connect("enter-event", _callback);
  };

  MyApplet.prototype._clearPrevAppSelection = function(actor) {
    if (this._previousSelectedActor && this._previousSelectedActor !== actor) {
      this._previousSelectedActor.style_class = "menu-application-button";
    }
  };

  MyApplet.prototype._clearPrevCatSelection = function(actor) {
    if (this._previousSelectedActor && this._previousSelectedActor !== actor) {
      this._previousSelectedActor.style_class = "menu-category-button";
    }
  };

  MyApplet.prototype._appletStyles = function(pane) {
    var favsWidth, scrollBoxHeight, scrollWidth;
    favsWidth = this.favsBox.get_allocation_box().x2 - this.favsBox.get_allocation_box().x1;
    scrollWidth = this.searchBox.get_width() + this.rightButtonsBox.actor.get_width();
    this.searchEntry.style = "width:" + favsWidth + "px";
    this.appsButton.box.style = "width:" + favsWidth + "px";
    scrollBoxHeight = (this.favsBox.get_allocation_box().y2 - this.favsBox.get_allocation_box().y1) - (this.selectedAppBox.get_allocation_box().y2 - this.selectedAppBox.get_allocation_box().y1);
    this.applicationsScrollBox.style = "width: " + (scrollWidth * 0.55) + "px;height: " + scrollBoxHeight + "px;";
    this.categoriesScrollBox.style = "width: " + (scrollWidth * 0.45) + "px;height: " + scrollBoxHeight + "px;";
  };

  MyApplet.prototype._refreshApps = function() {
    var bookmarks, button, devices, i, id, iter, nextType, place, places, root, tree, trees;
    this.applicationsBox.destroy_all_children();
    this._applicationsButtons = new Array();
    this._placesButtons = new Array();
    this._recentButtons = new Array();
    this._applicationsBoxWidth = 0;
    this.categoriesBox.destroy_all_children();
    this._allAppsCategoryButton = new CategoryButton(null);
    this._addEnterEvent(this._allAppsCategoryButton, (function(_this) {
      return function() {
        if (!_this.searchActive) {
          _this._allAppsCategoryButton.isHovered = true;
          _this._allAppsCategoryButton.actor.style_class = "menu-category-button-selected";
          if (_this.hover_delay > 0) {
            Tweener.addTween(_this, {
              time: _this.hover_delay,
              onComplete: function() {
                if (_this._allAppsCategoryButton.isHovered) {
                  _this._clearPrevCatSelection(_this._allAppsCategoryButton.actor);
                  _this._select_category(null, _this._allAppsCategoryButton);
                } else {
                  _this._allAppsCategoryButton.actor.style_class = "menu-category-button";
                }
              }
            });
          } else {
            _this._clearPrevCatSelection(_this._allAppsCategoryButton.actor);
            _this._select_category(null, _this._allAppsCategoryButton);
          }
        }
      };
    })(this));
    this._allAppsCategoryButton.actor.connect("leave-event", (function(_this) {
      return function() {
        if (!_this.searchActive) {
          _this._allAppsCategoryButton.actor.style_class = "menu-category-button";
        }
        _this._previousSelectedActor = _this._allAppsCategoryButton.actor;
        _this._allAppsCategoryButton.isHovered = false;
      };
    })(this));
    this.categoriesBox.add_actor(this._allAppsCategoryButton.actor);
    trees = [appsys.get_tree()];
    for (i in trees) {
      tree = trees[i];
      root = tree.get_root_directory();
      iter = root.iter();
      nextType = void 0;
      while ((nextType = iter.next()) !== CMenu.TreeItemType.INVALID) {
        if (nextType === CMenu.TreeItemType.DIRECTORY) {
          (function(_this) {
            return (function(dir) {
              var categoryButton;
              if (dir.get_is_nodisplay()) {
                return;
              }
              _this.applicationsByCategory[dir.get_menu_id()] = new Array();
              _this._loadCategory(dir);
              if (_this.applicationsByCategory[dir.get_menu_id()].length > 0) {
                categoryButton = new CategoryButton(dir);
                _this._addEnterEvent(categoryButton, function() {
                  if (!_this.searchActive) {
                    categoryButton.isHovered = true;
                    categoryButton.actor.style_class = "menu-category-button-selected";
                    if (_this.hover_delay > 0) {
                      Tweener.addTween(_this, {
                        time: _this.hover_delay,
                        onComplete: function() {
                          if (categoryButton.isHovered) {
                            _this._clearPrevCatSelection(categoryButton.actor);
                            _this._select_category(dir, categoryButton);
                          } else {
                            categoryButton.actor.style_class = "menu-category-button";
                          }
                        }
                      });
                    } else {
                      _this._clearPrevCatSelection(categoryButton.actor);
                      _this._select_category(dir, categoryButton);
                    }
                  }
                });
                categoryButton.actor.connect("leave-event", function() {
                  if (!_this.searchActive) {
                    categoryButton.actor.style_class = "menu-category-button";
                  }
                  _this._previousSelectedActor = categoryButton.actor;
                  categoryButton.isHovered = false;
                });
                return _this.categoriesBox.add_actor(categoryButton.actor);
              }
            });
          })(this)(iter.get_directory());
        }
      }
    }
    this._applicationsButtons.sort((function(_this) {
      return function(a, b) {
        return a.app.get_name().toLowerCase() > b.app.get_name().toLowerCase();
      };
    })(this));
    i = 0;
    while (i < this._applicationsButtons.length) {
      this.applicationsBox.add_actor(this._applicationsButtons[i].actor);
      this._applicationsButtons[i].actor.realize();
      this.applicationsBox.add_actor(this._applicationsButtons[i].menu.actor);
      i++;
    }
    if (this.showPlaces) {
      this.placesButton = new PlaceCategoryButton();
      this._addEnterEvent(this.placesButton, (function(_this) {
        return function() {
          if (!_this.searchActive) {
            _this.placesButton.isHovered = true;
            _this.placesButton.actor.style_class = "menu-category-button-selected";
            Tweener.addTween(_this, {
              time: _this.hover_delay,
              onComplete: function() {
                if (_this.placesButton.isHovered) {
                  _this._clearPrevCatSelection(_this.placesButton);
                  _this._displayButtons(null, -1);
                }
              }
            });
          }
          _this._scrollToCategoryButton(_this.placesButton);
        };
      })(this));
      this.placesButton.actor.connect("leave-event", (function(_this) {
        return function() {
          if (!_this.searchActive) {
            _this.placesButton.actor.style_class = "menu-category-button";
          }
          _this._previousSelectedActor = _this.placesButton.actor;
          _this.placesButton.isHovered = false;
        };
      })(this));
      this.categoriesBox.add_actor(this.placesButton.actor);
      bookmarks = this._listBookmarks();
      devices = this._listDevices();
      places = bookmarks.concat(devices);
      i = 0;
      while (i < places.length) {
        place = places[i];
        (function(_this) {
          return (function(button) {
            _this._addEnterEvent(button, function() {
              _this._clearPrevAppSelection(button.actor);
              button.actor.style_class = "menu-application-button-selected";
              _this._scrollToButton(button);
              _this.selectedAppDescription.set_text(button.place.id.slice(16));
            });
            button.actor.connect("leave-event", function() {
              button.actor.style_class = "menu-application-button";
              _this._previousSelectedActor = button.actor;
              _this.selectedAppDescription.set_text("");
            });
            _this._placesButtons.push(button);
            return _this.applicationsBox.add_actor(button.actor);
          });
        })(this)(new PlaceButton(this, place, place.name));
        i++;
      }
    }
    if (this.showRecent) {
      this.recentButton = new RecentCategoryButton();
      this._addEnterEvent(this.recentButton, (function(_this) {
        return function() {
          if (!_this.searchActive) {
            _this.recentButton.isHovered = true;
            _this.recentButton.actor.style_class = "menu-category-button-selected";
            Tweener.addTween(_this, {
              time: _this.hover_delay,
              onComplete: function() {
                if (_this.recentButton.isHovered) {
                  _this._clearPrevCatSelection(_this.recentButton.actor);
                  _this._displayButtons(null, null, -1);
                }
              }
            });
          }
          _this._scrollToCategoryButton(_this.recentButton);
        };
      })(this));
      this.recentButton.actor.connect("leave-event", (function(_this) {
        return function() {
          if (!_this.searchActive) {
            _this.recentButton.actor.style_class = "menu-category-button";
          }
          _this._previousSelectedActor = _this.recentButton.actor;
          _this.recentButton.isHovered = false;
        };
      })(this));
      this.categoriesBox.add_actor(this.recentButton.actor);
      id = 0;
      while (id < MAX_RECENT_FILES && id < this.RecentManager._infosByTimestamp.length) {
        (function(_this) {
          return (function(button) {
            _this._addEnterEvent(button, function() {
              _this._clearPrevAppSelection(button.actor);
              button.actor.style_class = "menu-application-button-selected";
              _this._scrollToButton(button);
              _this.selectedAppDescription.set_text(button.file.uri.slice(7));
            });
            button.actor.connect("leave-event", function() {
              button.actor.style_class = "menu-application-button";
              _this._previousSelectedActor = button.actor;
              _this.selectedAppTitle.set_text("");
              _this.selectedAppDescription.set_text("");
            });
            _this._recentButtons.push(button);
            return _this.applicationsBox.add_actor(button.actor);
          });
        })(this)(new RecentButton(this, this.RecentManager._infosByTimestamp[id]));
        id++;
      }
      if (this.RecentManager._infosByTimestamp.length > 0) {
        button = new RecentClearButton(this);
        this._addEnterEvent(button, (function(_this) {
          return function() {
            _this._clearPrevAppSelection(button.actor);
            button.actor.style_class = "menu-application-button-selected";
            _this._scrollToButton(button);
          };
        })(this));
        button.actor.connect("leave-event", (function(_this) {
          return function() {
            button.actor.style_class = "menu-application-button";
            _this._previousSelectedActor = button.actor;
          };
        })(this));
        this._recentButtons.push(button);
        this.applicationsBox.add_actor(button.actor);
      }
    }
    this._setCategoriesButtonActive(!this.searchActive);
  };

  MyApplet.prototype._refreshFavs = function() {
    var app, appSys, favoritesBox, i, j, launchers;
    this.favsBox.get_children().forEach((function(_this) {
      return function(child) {
        child.destroy();
      };
    })(this));
    favoritesBox = new FavoritesBox();
    this.favsBox.add_actor(favoritesBox.actor, {
      y_align: St.Align.END,
      y_fill: false
    });
    this._favoritesButtons = new Array();
    launchers = global.settings.get_strv("favorite-apps");
    appSys = Cinnamon.AppSystem.get_default();
    j = 0;
    i = 0;
    while (i < launchers.length) {
      app = appSys.lookup_app(launchers[i]);
      if (!app) {
        app = appSys.lookup_settings_app(launchers[i]);
      }
      if (app) {
        (function(_this) {
          return (function(button) {
            _this._favoritesButtons[app] = button;
            favoritesBox.actor.add_actor(button.actor, {
              y_align: St.Align.END,
              y_fill: false
            });
            favoritesBox.actor.add_actor(button.menu.actor, {
              y_align: St.Align.END,
              y_fill: false
            });
            button.actor.connect("enter-event", function() {
              _this.selectedAppTitle.set_text(button.app.get_name());
              if (button.app.get_description()) {
                _this.selectedAppDescription.set_text(button.app.get_description());
              } else {
                _this.selectedAppDescription.set_text("");
              }
            });
            return button.actor.connect("leave-event", function() {
              _this.selectedAppTitle.set_text("");
              _this.selectedAppDescription.set_text("");
            });
          });
        })(this)(new FavoritesButton(this, app, launchers.length, this.favorite_icon_size));
        ++j;
      }
      ++i;
    }
  };

  MyApplet.prototype._loadCategory = function(dir, top_dir) {
    var app, dupe, entry, i, iter, nextType, subdir;
    iter = dir.iter();
    dupe = false;
    nextType = void 0;
    if (!top_dir) {
      top_dir = dir;
    }
    while ((nextType = iter.next()) !== CMenu.TreeItemType.INVALID) {
      if (nextType === CMenu.TreeItemType.ENTRY) {
        entry = iter.get_entry();
        if (!entry.get_app_info().get_nodisplay()) {
          app = appsys.lookup_app_by_tree_entry(entry);
          dupe = this.find_dupe(app);
          if (!dupe) {
            (function(_this) {
              return (function(applicationButton) {
                applicationButton.actor.connect("realize", _this._onApplicationButtonRealized);
                applicationButton.actor.connect("leave-event", function() {
                  return _this._appLeaveEvent(applicationButton);
                });
                _this._addEnterEvent(applicationButton, function() {
                  return _this._appEnterEvent(applicationButton);
                });
                _this._applicationsButtons.push(applicationButton);
                applicationButton.category.push(top_dir.get_menu_id());
                return _this.applicationsByCategory[top_dir.get_menu_id()].push(app.get_name());
              });
            })(this)(new ApplicationButton(this, app));
          } else {
            i = 0;
            while (i < this._applicationsButtons.length) {
              if (this._applicationsButtons[i].app === app) {
                this._applicationsButtons[i].category.push(dir.get_menu_id());
              }
              i++;
            }
            this.applicationsByCategory[dir.get_menu_id()].push(app.get_name());
          }
        }
      } else if (nextType === CMenu.TreeItemType.DIRECTORY) {
        subdir = iter.get_directory();
        this.applicationsByCategory[subdir.get_menu_id()] = new Array();
        this._loadCategory(subdir, top_dir);
      }
    }
  };

  MyApplet.prototype._appLeaveEvent = function(applicationButton) {
    this._previousSelectedActor = applicationButton.actor;
    applicationButton.actor.style_class = "menu-application-button";
    this.selectedAppTitle.set_text("");
    this.selectedAppDescription.set_text("");
  };

  MyApplet.prototype._appEnterEvent = function(applicationButton) {
    this.selectedAppTitle.set_text(applicationButton.app.get_name());
    if (applicationButton.app.get_description()) {
      this.selectedAppDescription.set_text(applicationButton.app.get_description());
    } else {
      this.selectedAppDescription.set_text("");
    }
    this._clearPrevAppSelection(applicationButton.actor);
    applicationButton.actor.style_class = "menu-application-button-selected";
    this._scrollToButton(applicationButton);
  };

  MyApplet.prototype.find_dupe = function(app) {
    var i, ret;
    ret = false;
    i = 0;
    while (i < this._applicationsButtons.length) {
      if (app === this._applicationsButtons[i].app) {
        ret = true;
        break;
      }
      i++;
    }
    return ret;
  };

  MyApplet.prototype._scrollToButton = function(button) {
    var box_height, current_scroll_value, new_scroll_value;
    current_scroll_value = this.applicationsScrollBox.get_vscroll_bar().get_adjustment().get_value();
    box_height = this.applicationsScrollBox.get_allocation_box().y2 - this.applicationsScrollBox.get_allocation_box().y1;
    new_scroll_value = current_scroll_value;
    if (current_scroll_value > button.actor.get_allocation_box().y1 - 10) {
      new_scroll_value = button.actor.get_allocation_box().y1 - 10;
    }
    if (box_height + current_scroll_value < button.actor.get_allocation_box().y2 + 10) {
      new_scroll_value = button.actor.get_allocation_box().y2 - box_height + 10;
    }
    if (new_scroll_value !== current_scroll_value) {
      this.applicationsScrollBox.get_vscroll_bar().get_adjustment().set_value(new_scroll_value);
    }
  };

  MyApplet.prototype._scrollToCategoryButton = function(button) {
    var box_height, current_scroll_value, new_scroll_value;
    current_scroll_value = this.categoriesScrollBox.get_vscroll_bar().get_adjustment().get_value();
    box_height = this.categoriesScrollBox.get_allocation_box().y2 - this.categoriesScrollBox.get_allocation_box().y1;
    new_scroll_value = current_scroll_value;
    if (current_scroll_value > button.actor.get_allocation_box().y1 - 10) {
      new_scroll_value = button.actor.get_allocation_box().y1 - 10;
    }
    if (box_height + current_scroll_value < button.actor.get_allocation_box().y2 + 10) {
      new_scroll_value = button.actor.get_allocation_box().y2 - box_height + 10;
    }
    if (new_scroll_value !== current_scroll_value) {
      this.categoriesScrollBox.get_vscroll_bar().get_adjustment().set_value(new_scroll_value);
    }
  };

  MyApplet.prototype._display = function() {
    var section;
    this._activeContainer = null;
    this._activeActor = null;
    section = new PopupMenu.PopupMenuSection();
    this.menu.addMenuItem(section);
    this.leftPane = new St.Bin();
    this.favsBox = new St.BoxLayout({
      vertical: true
    });
    this.favsBox.style = "min-height: 152px;min-width: 235px;";
    this.appsBox = new St.BoxLayout({
      vertical: true
    });
    this.searchBox = new St.BoxLayout({
      style_class: "menu-search-box"
    });
    this.searchBox.set_style("padding-right: 0px;padding-left: 0px");
    this.searchEntry = new St.Entry({
      name: "menu-search-entry",
      hint_text: _("Type to search..."),
      track_hover: true,
      can_focus: true
    });
    this.searchEntry.set_secondary_icon(this._searchInactiveIcon);
    this.searchActive = false;
    this.searchEntryText = this.searchEntry.clutter_text;
    this.searchEntryText.connect("text-changed", this._onSearchTextChanged);
    this.searchEntryText.connect("key-press-event", this._onMenuKeyPress);
    this._previousSearchPattern = "";
    this.selectedAppBox = new St.BoxLayout({
      style_class: "menu-selected-app-box",
      vertical: true
    });
    this.selectedAppTitle = new St.Label({
      style_class: "menu-selected-app-title",
      text: ""
    });
    this.selectedAppBox.add_actor(this.selectedAppTitle);
    this.selectedAppDescription = new St.Label({
      style_class: "menu-selected-app-description",
      text: ""
    });
    this.categoriesApplicationsBox = new CategoriesApplicationsBox();
    this.categoriesBox = new St.BoxLayout({
      style_class: "menu-categories-box",
      vertical: true
    });
    this.categoriesScrollBox = new St.ScrollView({
      x_fill: true,
      y_fill: false,
      y_align: St.Align.START,
      style_class: "vfade menu-applications-scrollbox"
    });
    this.categoriesScrollBox.set_width(192);
    this.applicationsBox = new St.BoxLayout({
      style_class: "menu-applications-box",
      vertical: true
    });
    this.applicationsScrollBox = new St.ScrollView({
      x_fill: true,
      y_fill: false,
      y_align: St.Align.START,
      style_class: "vfade menu-applications-scrollbox"
    });
    this.applicationsScrollBox.set_width(244);
    this.a11y_settings = new Gio.Settings({
      schema: "org.gnome.desktop.a11y.applications"
    });
    this.a11y_settings.connect("changed::screen-magnifier-enabled", this._updateVFade);
    this._updateVFade();
    this.settings.bindProperty(Settings.BindingDirection.IN, "enable-autoscroll", "autoscroll_enabled", this._update_autoscroll, null);
    this._update_autoscroll();
    this.settings.bindProperty(Settings.BindingDirection.IN, "favorite-icon-size", "favorite_icon_size", this._refreshFavs, null);
    (function(_this) {
      return (function(vscroll) {
        vscroll.connect("scroll-start", function() {
          _this.menu.passEvents = true;
        });
        return vscroll.connect("scroll-stop", function() {
          _this.menu.passEvents = false;
        });
      });
    })(this)(this.applicationsScrollBox.get_vscroll_bar());
    (function(_this) {
      return (function(vscroll) {
        vscroll.connect("scroll-start", function() {
          _this.menu.passEvents = true;
        });
        return vscroll.connect("scroll-stop", function() {
          _this.menu.passEvents = false;
        });
      });
    })(this)(this.categoriesScrollBox.get_vscroll_bar());
    this._refreshFavs();
    this.separator = new PopupMenu.PopupSeparatorMenuItem();
    this.separator.actor.set_style("padding: 0em 1em;");
    this.appsButton = new AllProgramsItem(_("All Programs"), "forward", this, false);
    this.leftPaneBox = new St.BoxLayout({
      style_class: "menu-favorites-box",
      vertical: true
    });
    this.rightButtonsBox = new RightButtonsBox(this, this.menu);
    this.rightButtonsBox.actor.style_class = "right-buttons-box";
    this.mainBox = new St.BoxLayout({
      style_class: "menu-applications-box",
      vertical: false
    });
    this.applicationsByCategory = {};
    this._refreshApps();
    this.appBoxIter = new VisibleChildIterator(this, this.applicationsBox);
    this.applicationsBox._vis_iter = this.appBoxIter;
    this.catBoxIter = new VisibleChildIterator(this, this.categoriesBox);
    this.categoriesBox._vis_iter = this.catBoxIter;
    this.leftPane.set_child(this.favsBox, {
      y_align: St.Align.END,
      y_fill: false
    });
    this.selectedAppBox.add_actor(this.selectedAppTitle);
    this.selectedAppBox.add_actor(this.selectedAppDescription);
    this.categoriesScrollBox.add_actor(this.categoriesBox);
    this.categoriesScrollBox.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC);
    this.applicationsScrollBox.add_actor(this.applicationsBox);
    this.applicationsScrollBox.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC);
    this.categoriesApplicationsBox.actor.add_actor(this.categoriesScrollBox);
    this.categoriesApplicationsBox.actor.add_actor(this.applicationsScrollBox);
    this.appsBox.add_actor(this.selectedAppBox);
    this.appsBox.add_actor(this.categoriesApplicationsBox.actor);
    this.searchBox.add_actor(this.searchEntry);
    this.leftPaneBox.add_actor(this.leftPane);
    this.leftPaneBox.add_actor(this.separator.actor);
    this.leftPaneBox.add_actor(this.appsButton.actor);
    this.leftPaneBox.add_actor(this.searchBox);
    this.mainBox.add_actor(this.leftPaneBox);
    this.mainBox.add_actor(this.rightButtonsBox.actor);
    section.actor.add_actor(this.mainBox);
    Mainloop.idle_add((function(_this) {
      return function() {
        _this._clearAllSelections();
      };
    })(this));
  };

  MyApplet.prototype.switchPanes = function(pane) {
    if (pane === "apps") {
      this.leftPane.set_child(this.appsBox);
      this.appsButton.label.set_text(" " + _("Back"));
      this.rightButtonsBox.actor.hide();
      this._appletStyles("apps");
    } else {
      this.leftPane.set_child(this.favsBox);
      this.appsButton.label.set_text(" " + _("All Programs"));
      if (this.menu.showQuicklinks) {
        this.rightButtonsBox.actor.show();
      }
      this._appletStyles("favs");
    }
    this.rightButtonsBox.shutdown.label.set_text(_("Shutdown"));
  };

  MyApplet.prototype._updateVFade = function() {
    var mag_on;
    mag_on = this.a11y_settings.get_boolean("screen-magnifier-enabled");
    if (mag_on) {
      this.applicationsScrollBox.style_class = "menu-applications-scrollbox";
    } else {
      this.applicationsScrollBox.style_class = "vfade menu-applications-scrollbox";
    }
  };

  MyApplet.prototype._update_autoscroll = function() {
    this.applicationsScrollBox.set_auto_scrolling(this.autoscroll_enabled);
  };

  MyApplet.prototype._clearAllSelections = function() {
    var actor, actors, i;
    actors = this.applicationsBox.get_children();
    i = 0;
    while (i < actors.length) {
      actor = actors[i];
      actor.style_class = "menu-application-button";
      actor.hide();
      i++;
    }
    actors = this.categoriesBox.get_children();
    i = 0;
    while (i < actors.length) {
      actor = actors[i];
      actor.style_class = "menu-category-button";
      actor.show();
      i++;
    }
  };

  MyApplet.prototype._select_category = function(dir, categoryButton) {
    if (dir) {
      this._displayButtons(this._listApplications(dir.get_menu_id()));
    } else {
      this._displayButtons(this._listApplications(null));
    }
    this.closeApplicationsContextMenus(null, false);
    this._scrollToCategoryButton(categoryButton);
  };

  MyApplet.prototype.closeApplicationsContextMenus = function(excludeApp, animate) {
    var app;
    for (app in this._applicationsButtons) {
      if (app !== excludeApp && this._applicationsButtons[app].menu.isOpen) {
        if (animate) {
          this._applicationsButtons[app].toggleMenu();
        } else {
          this._applicationsButtons[app].closeMenu();
        }
      }
    }
  };

  MyApplet.prototype._onApplicationButtonRealized = function(actor) {
    if (actor.get_width() > this._applicationsBoxWidth) {
      this._applicationsBoxWidth = actor.get_width();
      this.applicationsBox.set_width(this._applicationsBoxWidth + 20);
    }
  };

  MyApplet.prototype._displayButtons = function(appCategory, places, recent, apps, autocompletes) {
    var i, innerapps;
    innerapps = this.applicationsBox.get_children();
    for (i in innerapps) {
      innerapps[i].hide();
    }
    if (appCategory) {
      if (appCategory === "all") {
        this._applicationsButtons.forEach((function(_this) {
          return function(item, index) {
            if (!item.actor.visible) {
              item.actor.show();
            }
          };
        })(this));
      } else {
        this._applicationsButtons.forEach((function(_this) {
          return function(item, index) {
            if (item.category.indexOf(appCategory) !== -1) {
              if (!item.actor.visible) {
                item.actor.show();
              }
            } else {
              if (item.actor.visible) {
                item.actor.hide();
              }
            }
          };
        })(this));
      }
    } else if (apps) {
      i = 0;
      while (i < this._applicationsButtons.length) {
        if (apps.indexOf(this._applicationsButtons[i].name) !== -1) {
          if (!this._applicationsButtons[i].actor.visible) {
            this._applicationsButtons[i].actor.show();
          }
        } else {
          if (this._applicationsButtons[i].actor.visible) {
            this._applicationsButtons[i].actor.hide();
          }
        }
        i++;
      }
    } else {
      this._applicationsButtons.forEach((function(_this) {
        return function(item, index) {
          if (item.actor.visible) {
            item.actor.hide();
          }
        };
      })(this));
    }
    if (places) {
      if (places === -1) {
        this._placesButtons.forEach((function(_this) {
          return function(item, index) {
            item.actor.show();
          };
        })(this));
      } else {
        i = 0;
        while (i < this._placesButtons.length) {
          if (places.indexOf(this._placesButtons[i].button_name) !== -1) {
            if (!this._placesButtons[i].actor.visible) {
              this._placesButtons[i].actor.show();
            }
          } else {
            if (this._placesButtons[i].actor.visible) {
              this._placesButtons[i].actor.hide();
            }
          }
          i++;
        }
      }
    } else {
      this._placesButtons.forEach((function(_this) {
        return function(item, index) {
          if (item.actor.visible) {
            item.actor.hide();
          }
        };
      })(this));
    }
    if (recent) {
      if (recent === -1) {
        this._recentButtons.forEach((function(_this) {
          return function(item, index) {
            if (!item.actor.visible) {
              item.actor.show();
            }
          };
        })(this));
      } else {
        i = 0;
        while (i < this._recentButtons.length) {
          if (recent.indexOf(this._recentButtons[i].button_name) !== -1) {
            if (!this._recentButtons[i].actor.visible) {
              this._recentButtons[i].actor.show();
            }
          } else {
            if (this._recentButtons[i].actor.visible) {
              this._recentButtons[i].actor.hide();
            }
          }
          i++;
        }
      }
    } else {
      this._recentButtons.forEach((function(_this) {
        return function(item, index) {
          if (item.actor.visible) {
            item.actor.hide();
          }
        };
      })(this));
    }
    if (autocompletes) {
      i = 0;
      while (i < autocompletes.length) {
        (function(_this) {
          return (function(button) {
            button.actor.connect("realize", _this._onApplicationButtonRealized);
            button.actor.connect("leave-event", function() {
              return _this._appLeaveEvent(button);
            });
            _this._addEnterEvent(button, function() {
              return _this._appEnterEvent(button);
            });
            _this._transientButtons.push(button);
            _this.applicationsBox.add_actor(button.actor);
            return button.actor.realize();
          });
        })(this)(new TransientButton(this, autocompletes[i]));
        i++;
      }
    }
  };

  MyApplet.prototype._setCategoriesButtonActive = function(active) {
    var button, categoriesButtons, e, error, i;
    try {
      categoriesButtons = this.categoriesBox.get_children();
      for (i in categoriesButtons) {
        button = categoriesButtons[i];
        if (active) {
          button.set_style_class_name("menu-category-button");
        } else {
          button.set_style_class_name("menu-category-button-greyed");
        }
      }
    } catch (error) {
      e = error;
      global.log(e);
    }
  };

  MyApplet.prototype.resetSearch = function() {
    this.searchEntry.set_text("");
    this.searchActive = false;
    this._clearAllSelections();
    this._setCategoriesButtonActive(true);
    global.stage.set_key_focus(this.searchEntry);
  };

  MyApplet.prototype._onSearchTextChanged = function(se, prop) {
    var searchString;
    if (this.menuIsOpening) {
      this.menuIsOpening = false;
      return false;
    } else {
      searchString = this.searchEntry.get_text();
      this.searchActive = searchString !== "";
      this._fileFolderAccessActive = this.searchActive && this.searchFilesystem;
      this._clearAllSelections();
      if (this.searchActive) {
        this.searchEntry.set_secondary_icon(this._searchActiveIcon);
        if (this._searchIconClickedId === 0) {
          this._searchIconClickedId = this.searchEntry.connect("secondary-icon-clicked", (function(_this) {
            return function() {
              _this.resetSearch();
              _this._select_category(null, _this._allAppsCategoryButton);
            };
          })(this));
        }
        this._setCategoriesButtonActive(false);
        this._doSearch();
      } else {
        if (this._searchIconClickedId > 0) {
          this.searchEntry.disconnect(this._searchIconClickedId);
        }
        this._searchIconClickedId = 0;
        this.searchEntry.set_secondary_icon(this._searchInactiveIcon);
        this._previousSearchPattern = "";
        this._setCategoriesButtonActive(true);
        this._select_category(null, this._allAppsCategoryButton);
      }
      return false;
    }
  };

  MyApplet.prototype._listBookmarks = function(pattern) {
    var bookmarks, id, res;
    bookmarks = Main.placesManager.getBookmarks();
    res = new Array();
    id = 0;
    while (id < bookmarks.length) {
      if (!pattern || bookmarks[id].name.toLowerCase().indexOf(pattern) !== -1) {
        res.push(bookmarks[id]);
      }
      id++;
    }
    return res;
  };

  MyApplet.prototype._listDevices = function(pattern) {
    var devices, id, res;
    devices = Main.placesManager.getMounts();
    res = new Array();
    id = 0;
    while (id < devices.length) {
      if (!pattern || devices[id].name.toLowerCase().indexOf(pattern) !== -1) {
        res.push(devices[id]);
      }
      id++;
    }
    return res;
  };

  MyApplet.prototype._listApplications = function(category_menu_id, pattern) {
    var app, applist, i, res;
    applist = new Array();
    if (category_menu_id) {
      applist = category_menu_id;
    } else {
      applist = "all";
    }
    res = void 0;
    if (pattern) {
      res = new Array();
      for (i in this._applicationsButtons) {
        app = this._applicationsButtons[i].app;
        if (app.get_name().toLowerCase().indexOf(pattern) !== -1 || (app.get_description() && app.get_description().toLowerCase().indexOf(pattern) !== -1) || (app.get_id() && app.get_id().slice(0, -8).toLowerCase().indexOf(pattern) !== -1)) {
          res.push(app.get_name());
        }
      }
    } else {
      res = applist;
    }
    return res;
  };

  MyApplet.prototype._doSearch = function() {
    var acResults, appResults, bookmarks, devices, i, item_actor, pattern, placesResults, recentResults;
    if (this.leftPane.get_child() === this.favsBox) {
      this.switchPanes("apps");
    }
    pattern = this.searchEntryText.get_text().replace(/^\s+/g, "").replace(/\s+$/g, "").toLowerCase();
    if (pattern === this._previousSearchPattern) {
      return false;
    }
    this._previousSearchPattern = pattern;
    this._activeContainer = null;
    this._activeActor = null;
    this._selectedItemIndex = null;
    this._previousTreeItemIndex = null;
    this._previousTreeSelectedActor = null;
    this._previousSelectedActor = null;
    if (pattern.length === 0) {
      return false;
    }
    appResults = this._listApplications(null, pattern);
    placesResults = new Array();
    bookmarks = this._listBookmarks(pattern);
    for (i in bookmarks) {
      placesResults.push(bookmarks[i].name);
    }
    devices = this._listDevices(pattern);
    for (i in devices) {
      placesResults.push(devices[i].name);
    }
    recentResults = new Array();
    i = 0;
    while (i < this._recentButtons.length) {
      if ((!(this._recentButtons[i] instanceof RecentClearButton)) && this._recentButtons[i].button_name.toLowerCase().indexOf(pattern) !== -1) {
        recentResults.push(this._recentButtons[i].button_name);
      }
      i++;
    }
    acResults = new Array();
    if (this.searchFilesystem) {
      acResults = this._getCompletions(this.searchEntryText.get_text());
    }
    this._displayButtons(null, placesResults, recentResults, appResults, acResults);
    this.appBoxIter.reloadVisible();
    if (this.appBoxIter.getNumVisibleChildren() > 0) {
      item_actor = this.appBoxIter.getFirstVisible();
      this._selectedItemIndex = this.appBoxIter.getAbsoluteIndexOfChild(item_actor);
      this._activeContainer = this.applicationsBox;
      if (item_actor && item_actor !== this.searchEntry) {
        item_actor._delegate.emit("enter-event");
      }
    }
    return false;
  };

  MyApplet.prototype._getCompletion = function(text) {
    if (text.indexOf("/") !== -1) {
      if (text.substr(text.length - 1) === "/") {
        return "";
      } else {
        return this._pathCompleter.get_completion_suffix(text);
      }
    } else {
      return false;
    }
  };

  MyApplet.prototype._getCompletions = function(text) {
    if (text.indexOf("/") !== -1) {
      return this._pathCompleter.get_completions(text);
    } else {
      return new Array();
    }
  };

  MyApplet.prototype._run = function(input) {
    var command, e, error, file, path;
    command = input;
    this._commandError = false;
    if (input) {
      path = null;
      if (input.charAt(0) === "/") {
        path = input;
      } else {
        if (input.charAt(0) === "~") {
          input = input.slice(1);
        }
        path = GLib.get_home_dir() + "/" + input;
      }
      if (GLib.file_test(path, GLib.FileTest.EXISTS)) {
        file = Gio.file_new_for_path(path);
        try {
          Gio.app_info_launch_default_for_uri(file.get_uri(), global.create_app_launch_context());
        } catch (error) {
          e = error;
          return false;
        }
      } else {
        return false;
      }
    }
    return true;
  };

  return MyApplet;

})();

main = function(metadata, orientation, panel_height, instance_id) {
  return new MyApplet(orientation, panel_height, instance_id);
};
